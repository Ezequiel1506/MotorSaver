
MotorSaver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08003b70  08003b70  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b70  08003b70  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000090  08003c08  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003c08  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b899  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b3  00000000  00000000  0002b952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001847a  00000000  00000000  0002f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e360  00000000  00000000  0004771a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b65  00000000  00000000  00055a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df5df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000df630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aa0 	.word	0x08003aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08003aa0 	.word	0x08003aa0

0800014c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000108 	.word	0x20000108

0800017c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000192:	4820      	ldr	r0, [pc, #128]	; (8000214 <send_to_lcd+0x98>)
 8000194:	f001 fc4b 	bl	8001a2e <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	08db      	lsrs	r3, r3, #3
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	2108      	movs	r1, #8
 80001a8:	481a      	ldr	r0, [pc, #104]	; (8000214 <send_to_lcd+0x98>)
 80001aa:	f001 fc40 	bl	8001a2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	089b      	lsrs	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	f003 0301 	and.w	r3, r3, #1
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	2110      	movs	r1, #16
 80001be:	4815      	ldr	r0, [pc, #84]	; (8000214 <send_to_lcd+0x98>)
 80001c0:	f001 fc35 	bl	8001a2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	085b      	lsrs	r3, r3, #1
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	2120      	movs	r1, #32
 80001d4:	480f      	ldr	r0, [pc, #60]	; (8000214 <send_to_lcd+0x98>)
 80001d6:	f001 fc2a 	bl	8001a2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <send_to_lcd+0x98>)
 80001e8:	f001 fc21 	bl	8001a2e <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2180      	movs	r1, #128	; 0x80
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <send_to_lcd+0x98>)
 80001f2:	f001 fc1c 	bl	8001a2e <HAL_GPIO_WritePin>
	delay (20);
 80001f6:	2014      	movs	r0, #20
 80001f8:	f7ff ffa8 	bl	800014c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2180      	movs	r1, #128	; 0x80
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <send_to_lcd+0x98>)
 8000202:	f001 fc14 	bl	8001a2e <HAL_GPIO_WritePin>
	delay (20);
 8000206:	2014      	movs	r0, #20
 8000208:	f7ff ffa0 	bl	800014c <delay>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40010c00 	.word	0x40010c00

08000218 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffa5 	bl	800017c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 030f 	and.w	r3, r3, #15
 8000238:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff9c 	bl	800017c <send_to_lcd>
}
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <lcd_send_data>:

void lcd_send_data (char data)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	091b      	lsrs	r3, r3, #4
 800025a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff8b 	bl	800017c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 030f 	and.w	r3, r3, #15
 800026c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	2101      	movs	r1, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ff82 	bl	800017c <send_to_lcd>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <lcd_clear>:

void lcd_clear (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ffc7 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(2);
 800028a:	2002      	movs	r0, #2
 800028c:	f001 f92c 	bl	80014e8 <HAL_Delay>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    switch (row)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d003      	beq.n	80002ac <lcd_put_cur+0x18>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d005      	beq.n	80002b6 <lcd_put_cur+0x22>
 80002aa:	e009      	b.n	80002c0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b2:	603b      	str	r3, [r7, #0]
            break;
 80002b4:	e004      	b.n	80002c0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002bc:	603b      	str	r3, [r7, #0]
            break;
 80002be:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffa7 	bl	8000218 <lcd_send_cmd>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <lcd_init>:


void lcd_init (void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002d6:	2032      	movs	r0, #50	; 0x32
 80002d8:	f001 f906 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002dc:	2030      	movs	r0, #48	; 0x30
 80002de:	f7ff ff9b 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002e2:	2005      	movs	r0, #5
 80002e4:	f001 f900 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002e8:	2030      	movs	r0, #48	; 0x30
 80002ea:	f7ff ff95 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002ee:	2001      	movs	r0, #1
 80002f0:	f001 f8fa 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002f4:	2030      	movs	r0, #48	; 0x30
 80002f6:	f7ff ff8f 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 80002fa:	200a      	movs	r0, #10
 80002fc:	f001 f8f4 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000300:	2020      	movs	r0, #32
 8000302:	f7ff ff89 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 8000306:	200a      	movs	r0, #10
 8000308:	f001 f8ee 	bl	80014e8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800030c:	2028      	movs	r0, #40	; 0x28
 800030e:	f7ff ff83 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 8000312:	2001      	movs	r0, #1
 8000314:	f001 f8e8 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000318:	2008      	movs	r0, #8
 800031a:	f7ff ff7d 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f001 f8e2 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff77 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f001 f8dc 	bl	80014e8 <HAL_Delay>
	HAL_Delay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f001 f8d9 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff6e 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f001 f8d3 	bl	80014e8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000342:	200c      	movs	r0, #12
 8000344:	f7ff ff68 	bl	8000218 <lcd_send_cmd>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000354:	e006      	b.n	8000364 <lcd_send_string+0x18>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1c5a      	adds	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff74 	bl	800024c <lcd_send_data>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f4      	bne.n	8000356 <lcd_send_string+0xa>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_12

/* SPI Chip Select */
static void SELECT(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000382:	4802      	ldr	r0, [pc, #8]	; (800038c <SELECT+0x14>)
 8000384:	f001 fb53 	bl	8001a2e <HAL_GPIO_WritePin>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40010c00 	.word	0x40010c00

08000390 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <DESELECT+0x14>)
 800039c:	f001 fb47 	bl	8001a2e <HAL_GPIO_WritePin>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80003b2:	bf00      	nop
 80003b4:	4808      	ldr	r0, [pc, #32]	; (80003d8 <SPI_TxByte+0x30>)
 80003b6:	f002 fa9d 	bl	80028f4 <HAL_SPI_GetState>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d1f9      	bne.n	80003b4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80003c0:	1df9      	adds	r1, r7, #7
 80003c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c6:	2201      	movs	r2, #1
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <SPI_TxByte+0x30>)
 80003ca:	f001 ffb5 	bl	8002338 <HAL_SPI_Transmit>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000b0 	.word	0x200000b0

080003dc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80003ea:	bf00      	nop
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <SPI_RxByte+0x38>)
 80003ee:	f002 fa81 	bl	80028f4 <HAL_SPI_GetState>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d1f9      	bne.n	80003ec <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80003f8:	1dba      	adds	r2, r7, #6
 80003fa:	1df9      	adds	r1, r7, #7
 80003fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <SPI_RxByte+0x38>)
 8000406:	f002 f8d3 	bl	80025b0 <HAL_SPI_TransmitReceive>

  return data;
 800040a:	79bb      	ldrb	r3, [r7, #6]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000b0 	.word	0x200000b0

08000418 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000420:	f7ff ffdc 	bl	80003dc <SPI_RxByte>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	701a      	strb	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SD_ReadyWait+0x34>)
 800043c:	2232      	movs	r2, #50	; 0x32
 800043e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000440:	f7ff ffcc 	bl	80003dc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000444:	f7ff ffca 	bl	80003dc <SPI_RxByte>
 8000448:	4603      	mov	r3, r0
 800044a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2bff      	cmp	r3, #255	; 0xff
 8000450:	d004      	beq.n	800045c <SD_ReadyWait+0x28>
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <SD_ReadyWait+0x34>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f3      	bne.n	8000444 <SD_ReadyWait+0x10>

  return res;
 800045c:	79fb      	ldrb	r3, [r7, #7]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000154 	.word	0x20000154

0800046c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000472:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000476:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000478:	f7ff ff8a 	bl	8000390 <DESELECT>

  for(int i = 0; i < 10; i++)
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	e005      	b.n	800048e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000482:	20ff      	movs	r0, #255	; 0xff
 8000484:	f7ff ff90 	bl	80003a8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	3301      	adds	r3, #1
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	2b09      	cmp	r3, #9
 8000492:	ddf6      	ble.n	8000482 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000494:	f7ff ff70 	bl	8000378 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80004ac:	2395      	movs	r3, #149	; 0x95
 80004ae:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e009      	b.n	80004ca <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80004b6:	1d3a      	adds	r2, r7, #4
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff72 	bl	80003a8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	ddf2      	ble.n	80004b6 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80004d0:	e002      	b.n	80004d8 <SD_PowerOn+0x6c>
  {
    Count--;
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80004d8:	f7ff ff80 	bl	80003dc <SPI_RxByte>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d002      	beq.n	80004e8 <SD_PowerOn+0x7c>
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1f4      	bne.n	80004d2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80004e8:	f7ff ff52 	bl	8000390 <DESELECT>
  SPI_TxByte(0XFF);
 80004ec:	20ff      	movs	r0, #255	; 0xff
 80004ee:	f7ff ff5b 	bl	80003a8 <SPI_TxByte>

  PowerFlag = 1;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <SD_PowerOn+0x94>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000ad 	.word	0x200000ad

08000504 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <SD_PowerOff+0x14>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200000ad 	.word	0x200000ad

0800051c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <SD_CheckPower+0x10>)
 8000522:	781b      	ldrb	r3, [r3, #0]
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	200000ad 	.word	0x200000ad

08000530 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <SD_RxDataBlock+0x68>)
 800053c:	220a      	movs	r2, #10
 800053e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000540:	f7ff ff4c 	bl	80003dc <SPI_RxByte>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2bff      	cmp	r3, #255	; 0xff
 800054c:	d104      	bne.n	8000558 <SD_RxDataBlock+0x28>
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <SD_RxDataBlock+0x68>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f3      	bne.n	8000540 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2bfe      	cmp	r3, #254	; 0xfe
 800055c:	d001      	beq.n	8000562 <SD_RxDataBlock+0x32>
    return FALSE;
 800055e:	2300      	movs	r3, #0
 8000560:	e016      	b.n	8000590 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff55 	bl	8000418 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff4f 	bl	8000418 <SPI_RxBytePtr>
  } while(btr -= 2);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	3b02      	subs	r3, #2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1ed      	bne.n	8000562 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000586:	f7ff ff29 	bl	80003dc <SPI_RxByte>
  SPI_RxByte();
 800058a:	f7ff ff27 	bl	80003dc <SPI_RxByte>

  return TRUE;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000153 	.word	0x20000153

0800059c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80005ac:	f7ff ff42 	bl	8000434 <SD_ReadyWait>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	d001      	beq.n	80005ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e040      	b.n	800063c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fef3 	bl	80003a8 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2bfd      	cmp	r3, #253	; 0xfd
 80005c6:	d031      	beq.n	800062c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fee7 	bl	80003a8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fee0 	bl	80003a8 <SPI_TxByte>
    } while (--wc);
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1eb      	bne.n	80005cc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80005f4:	f7ff fef2 	bl	80003dc <SPI_RxByte>
    SPI_RxByte();
 80005f8:	f7ff fef0 	bl	80003dc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80005fc:	e00b      	b.n	8000616 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80005fe:	f7ff feed 	bl	80003dc <SPI_RxByte>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	2b05      	cmp	r3, #5
 800060e:	d006      	beq.n	800061e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000610:	7b7b      	ldrb	r3, [r7, #13]
 8000612:	3301      	adds	r3, #1
 8000614:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	2b40      	cmp	r3, #64	; 0x40
 800061a:	d9f0      	bls.n	80005fe <SD_TxDataBlock+0x62>
 800061c:	e000      	b.n	8000620 <SD_TxDataBlock+0x84>
        break;
 800061e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000620:	bf00      	nop
 8000622:	f7ff fedb 	bl	80003dc <SPI_RxByte>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0fa      	beq.n	8000622 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	f003 031f 	and.w	r3, r3, #31
 8000632:	2b05      	cmp	r3, #5
 8000634:	d101      	bne.n	800063a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000650:	f7ff fef0 	bl	8000434 <SD_ReadyWait>
 8000654:	4603      	mov	r3, r0
 8000656:	2bff      	cmp	r3, #255	; 0xff
 8000658:	d001      	beq.n	800065e <SD_SendCmd+0x1a>
    return 0xFF;
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	e040      	b.n	80006e0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fea1 	bl	80003a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	0e1b      	lsrs	r3, r3, #24
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe9b 	bl	80003a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe95 	bl	80003a8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fe8f 	bl	80003a8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe8a 	bl	80003a8 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b40      	cmp	r3, #64	; 0x40
 800069c:	d101      	bne.n	80006a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800069e:	2395      	movs	r3, #149	; 0x95
 80006a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b48      	cmp	r3, #72	; 0x48
 80006a6:	d101      	bne.n	80006ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80006a8:	2387      	movs	r3, #135	; 0x87
 80006aa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fe7a 	bl	80003a8 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b4c      	cmp	r3, #76	; 0x4c
 80006b8:	d101      	bne.n	80006be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80006ba:	f7ff fe8f 	bl	80003dc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80006be:	230a      	movs	r3, #10
 80006c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80006c2:	f7ff fe8b 	bl	80003dc <SPI_RxByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80006ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da05      	bge.n	80006de <SD_SendCmd+0x9a>
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	73bb      	strb	r3, [r7, #14]
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f1      	bne.n	80006c2 <SD_SendCmd+0x7e>

  return res;
 80006de:	7b7b      	ldrb	r3, [r7, #13]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e0d5      	b.n	80008a8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <SD_disk_initialize+0x1c8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <SD_disk_initialize+0x2a>
    return Stat;
 800070a:	4b69      	ldr	r3, [pc, #420]	; (80008b0 <SD_disk_initialize+0x1c8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	e0ca      	b.n	80008a8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000712:	f7ff feab 	bl	800046c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000716:	f7ff fe2f 	bl	8000378 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800071e:	2100      	movs	r1, #0
 8000720:	2040      	movs	r0, #64	; 0x40
 8000722:	f7ff ff8f 	bl	8000644 <SD_SendCmd>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	f040 80a5 	bne.w	8000878 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <SD_disk_initialize+0x1cc>)
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000734:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000738:	2048      	movs	r0, #72	; 0x48
 800073a:	f7ff ff83 	bl	8000644 <SD_SendCmd>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d158      	bne.n	80007f6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e00c      	b.n	8000764 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800074a:	7bfc      	ldrb	r4, [r7, #15]
 800074c:	f7ff fe46 	bl	80003dc <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	f104 0310 	add.w	r3, r4, #16
 8000758:	443b      	add	r3, r7
 800075a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3301      	adds	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d9ef      	bls.n	800074a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800076a:	7abb      	ldrb	r3, [r7, #10]
 800076c:	2b01      	cmp	r3, #1
 800076e:	f040 8083 	bne.w	8000878 <SD_disk_initialize+0x190>
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	2baa      	cmp	r3, #170	; 0xaa
 8000776:	d17f      	bne.n	8000878 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000778:	2100      	movs	r1, #0
 800077a:	2077      	movs	r0, #119	; 0x77
 800077c:	f7ff ff62 	bl	8000644 <SD_SendCmd>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d807      	bhi.n	8000796 <SD_disk_initialize+0xae>
 8000786:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800078a:	2069      	movs	r0, #105	; 0x69
 800078c:	f7ff ff5a 	bl	8000644 <SD_SendCmd>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d005      	beq.n	80007a2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000796:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <SD_disk_initialize+0x1cc>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1eb      	bne.n	8000778 <SD_disk_initialize+0x90>
 80007a0:	e000      	b.n	80007a4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80007a2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80007a4:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <SD_disk_initialize+0x1cc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d064      	beq.n	8000878 <SD_disk_initialize+0x190>
 80007ae:	2100      	movs	r1, #0
 80007b0:	207a      	movs	r0, #122	; 0x7a
 80007b2:	f7ff ff47 	bl	8000644 <SD_SendCmd>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d15d      	bne.n	8000878 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e00c      	b.n	80007dc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80007c2:	7bfc      	ldrb	r4, [r7, #15]
 80007c4:	f7ff fe0a 	bl	80003dc <SPI_RxByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	f104 0310 	add.w	r3, r4, #16
 80007d0:	443b      	add	r3, r7
 80007d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	3301      	adds	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d9ef      	bls.n	80007c2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80007e2:	7a3b      	ldrb	r3, [r7, #8]
 80007e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SD_disk_initialize+0x108>
 80007ec:	2306      	movs	r3, #6
 80007ee:	e000      	b.n	80007f2 <SD_disk_initialize+0x10a>
 80007f0:	2302      	movs	r3, #2
 80007f2:	73bb      	strb	r3, [r7, #14]
 80007f4:	e040      	b.n	8000878 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80007f6:	2100      	movs	r1, #0
 80007f8:	2077      	movs	r0, #119	; 0x77
 80007fa:	f7ff ff23 	bl	8000644 <SD_SendCmd>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d808      	bhi.n	8000816 <SD_disk_initialize+0x12e>
 8000804:	2100      	movs	r1, #0
 8000806:	2069      	movs	r0, #105	; 0x69
 8000808:	f7ff ff1c 	bl	8000644 <SD_SendCmd>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d801      	bhi.n	8000816 <SD_disk_initialize+0x12e>
 8000812:	2302      	movs	r3, #2
 8000814:	e000      	b.n	8000818 <SD_disk_initialize+0x130>
 8000816:	2301      	movs	r3, #1
 8000818:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d10e      	bne.n	800083e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000820:	2100      	movs	r1, #0
 8000822:	2077      	movs	r0, #119	; 0x77
 8000824:	f7ff ff0e 	bl	8000644 <SD_SendCmd>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d80e      	bhi.n	800084c <SD_disk_initialize+0x164>
 800082e:	2100      	movs	r1, #0
 8000830:	2069      	movs	r0, #105	; 0x69
 8000832:	f7ff ff07 	bl	8000644 <SD_SendCmd>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800083c:	e00d      	b.n	800085a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800083e:	2100      	movs	r1, #0
 8000840:	2041      	movs	r0, #65	; 0x41
 8000842:	f7ff feff 	bl	8000644 <SD_SendCmd>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <SD_disk_initialize+0x1cc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1e1      	bne.n	800081a <SD_disk_initialize+0x132>
 8000856:	e000      	b.n	800085a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000858:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <SD_disk_initialize+0x1cc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d007      	beq.n	8000874 <SD_disk_initialize+0x18c>
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	2050      	movs	r0, #80	; 0x50
 800086a:	f7ff feeb 	bl	8000644 <SD_SendCmd>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <SD_disk_initialize+0x1d0>)
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800087e:	f7ff fd87 	bl	8000390 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000882:	f7ff fdab 	bl	80003dc <SPI_RxByte>

  if (type)
 8000886:	7bbb      	ldrb	r3, [r7, #14]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d008      	beq.n	800089e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <SD_disk_initialize+0x1c8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SD_disk_initialize+0x1c8>)
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e001      	b.n	80008a2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800089e:	f7ff fe31 	bl	8000504 <SD_PowerOff>
  }

  return Stat;
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <SD_disk_initialize+0x1c8>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000153 	.word	0x20000153
 80008b8:	200000ac 	.word	0x200000ac

080008bc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e002      	b.n	80008d6 <SD_disk_status+0x1a>

  return Stat;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <SD_disk_status+0x24>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000000 	.word	0x20000000

080008e4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <SD_disk_read+0x1c>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <SD_disk_read+0x20>
    return RES_PARERR;
 8000900:	2304      	movs	r3, #4
 8000902:	e051      	b.n	80009a8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <SD_disk_read+0xcc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000912:	2303      	movs	r3, #3
 8000914:	e048      	b.n	80009a8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <SD_disk_read+0xd0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	607b      	str	r3, [r7, #4]

  SELECT();
 8000928:	f7ff fd26 	bl	8000378 <SELECT>

  if (count == 1)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d111      	bne.n	8000956 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2051      	movs	r0, #81	; 0x51
 8000936:	f7ff fe85 	bl	8000644 <SD_SendCmd>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d129      	bne.n	8000994 <SD_disk_read+0xb0>
 8000940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000944:	68b8      	ldr	r0, [r7, #8]
 8000946:	f7ff fdf3 	bl	8000530 <SD_RxDataBlock>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d021      	beq.n	8000994 <SD_disk_read+0xb0>
      count = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	e01e      	b.n	8000994 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2052      	movs	r0, #82	; 0x52
 800095a:	f7ff fe73 	bl	8000644 <SD_SendCmd>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d117      	bne.n	8000994 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f7ff fde1 	bl	8000530 <SD_RxDataBlock>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00a      	beq.n	800098a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800097a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3b01      	subs	r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1ed      	bne.n	8000964 <SD_disk_read+0x80>
 8000988:	e000      	b.n	800098c <SD_disk_read+0xa8>
          break;
 800098a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800098c:	2100      	movs	r1, #0
 800098e:	204c      	movs	r0, #76	; 0x4c
 8000990:	f7ff fe58 	bl	8000644 <SD_SendCmd>
    }
  }

  DESELECT();
 8000994:	f7ff fcfc 	bl	8000390 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000998:	f7ff fd20 	bl	80003dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bf14      	ite	ne
 80009a2:	2301      	movne	r3, #1
 80009a4:	2300      	moveq	r3, #0
 80009a6:	b2db      	uxtb	r3, r3
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	200000ac 	.word	0x200000ac

080009b8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <SD_disk_write+0x1c>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d101      	bne.n	80009d8 <SD_disk_write+0x20>
    return RES_PARERR;
 80009d4:	2304      	movs	r3, #4
 80009d6:	e06b      	b.n	8000ab0 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <SD_disk_write+0x100>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SD_disk_write+0x32>
    return RES_NOTRDY;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e062      	b.n	8000ab0 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <SD_disk_write+0x100>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SD_disk_write+0x44>
    return RES_WRPRT;
 80009f8:	2302      	movs	r3, #2
 80009fa:	e059      	b.n	8000ab0 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80009fc:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <SD_disk_write+0x104>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	025b      	lsls	r3, r3, #9
 8000a0c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000a0e:	f7ff fcb3 	bl	8000378 <SELECT>

  if (count == 1)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d110      	bne.n	8000a3a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	2058      	movs	r0, #88	; 0x58
 8000a1c:	f7ff fe12 	bl	8000644 <SD_SendCmd>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d13a      	bne.n	8000a9c <SD_disk_write+0xe4>
 8000a26:	21fe      	movs	r1, #254	; 0xfe
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f7ff fdb7 	bl	800059c <SD_TxDataBlock>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d033      	beq.n	8000a9c <SD_disk_write+0xe4>
      count = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	e030      	b.n	8000a9c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <SD_disk_write+0x104>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2077      	movs	r0, #119	; 0x77
 8000a4a:	f7ff fdfb 	bl	8000644 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	2057      	movs	r0, #87	; 0x57
 8000a52:	f7ff fdf7 	bl	8000644 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2059      	movs	r0, #89	; 0x59
 8000a5a:	f7ff fdf3 	bl	8000644 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11b      	bne.n	8000a9c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000a64:	21fc      	movs	r1, #252	; 0xfc
 8000a66:	68b8      	ldr	r0, [r7, #8]
 8000a68:	f7ff fd98 	bl	800059c <SD_TxDataBlock>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00a      	beq.n	8000a88 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1ee      	bne.n	8000a64 <SD_disk_write+0xac>
 8000a86:	e000      	b.n	8000a8a <SD_disk_write+0xd2>
          break;
 8000a88:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000a8a:	21fd      	movs	r1, #253	; 0xfd
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fd85 	bl	800059c <SD_TxDataBlock>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <SD_disk_write+0xe4>
      {
        count = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000a9c:	f7ff fc78 	bl	8000390 <DESELECT>
  SPI_RxByte();
 8000aa0:	f7ff fc9c 	bl	80003dc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200000ac 	.word	0x200000ac

08000ac0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b08b      	sub	sp, #44	; 0x2c
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	603a      	str	r2, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	460b      	mov	r3, r1
 8000ace:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000ada:	2304      	movs	r3, #4
 8000adc:	e11b      	b.n	8000d16 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d129      	bne.n	8000b3e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d017      	beq.n	8000b22 <SD_disk_ioctl+0x62>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	dc1f      	bgt.n	8000b36 <SD_disk_ioctl+0x76>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <SD_disk_ioctl+0x40>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d00b      	beq.n	8000b16 <SD_disk_ioctl+0x56>
 8000afe:	e01a      	b.n	8000b36 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000b00:	f7ff fd0c 	bl	800051c <SD_CheckPower>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000b0a:	f7ff fcfb 	bl	8000504 <SD_PowerOff>
      res = RES_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b14:	e0fd      	b.n	8000d12 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000b16:	f7ff fca9 	bl	800046c <SD_PowerOn>
      res = RES_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b20:	e0f7      	b.n	8000d12 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	1c5c      	adds	r4, r3, #1
 8000b26:	f7ff fcf9 	bl	800051c <SD_CheckPower>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000b34:	e0ed      	b.n	8000d12 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000b36:	2304      	movs	r3, #4
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b3c:	e0e9      	b.n	8000d12 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000b3e:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <SD_disk_ioctl+0x260>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e0e2      	b.n	8000d16 <SD_disk_ioctl+0x256>

    SELECT();
 8000b50:	f7ff fc12 	bl	8000378 <SELECT>

    switch (ctrl)
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	2b0d      	cmp	r3, #13
 8000b58:	f200 80cc 	bhi.w	8000cf4 <SD_disk_ioctl+0x234>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <SD_disk_ioctl+0xa4>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000c5f 	.word	0x08000c5f
 8000b68:	08000b9d 	.word	0x08000b9d
 8000b6c:	08000c4f 	.word	0x08000c4f
 8000b70:	08000cf5 	.word	0x08000cf5
 8000b74:	08000cf5 	.word	0x08000cf5
 8000b78:	08000cf5 	.word	0x08000cf5
 8000b7c:	08000cf5 	.word	0x08000cf5
 8000b80:	08000cf5 	.word	0x08000cf5
 8000b84:	08000cf5 	.word	0x08000cf5
 8000b88:	08000cf5 	.word	0x08000cf5
 8000b8c:	08000cf5 	.word	0x08000cf5
 8000b90:	08000c71 	.word	0x08000c71
 8000b94:	08000c95 	.word	0x08000c95
 8000b98:	08000cb9 	.word	0x08000cb9
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2049      	movs	r0, #73	; 0x49
 8000ba0:	f7ff fd50 	bl	8000644 <SD_SendCmd>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 80a8 	bne.w	8000cfc <SD_disk_ioctl+0x23c>
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2110      	movs	r1, #16
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fcbc 	bl	8000530 <SD_RxDataBlock>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 809e 	beq.w	8000cfc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000bc0:	7b3b      	ldrb	r3, [r7, #12]
 8000bc2:	099b      	lsrs	r3, r3, #6
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10e      	bne.n	8000be8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000bca:	7d7b      	ldrb	r3, [r7, #21]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7d3b      	ldrb	r3, [r7, #20]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000bde:	8bfb      	ldrh	r3, [r7, #30]
 8000be0:	029a      	lsls	r2, r3, #10
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e02e      	b.n	8000c46 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000be8:	7c7b      	ldrb	r3, [r7, #17]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	7dbb      	ldrb	r3, [r7, #22]
 8000bf2:	09db      	lsrs	r3, r3, #7
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	7d7b      	ldrb	r3, [r7, #21]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f003 0306 	and.w	r3, r3, #6
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000c10:	7d3b      	ldrb	r3, [r7, #20]
 8000c12:	099b      	lsrs	r3, r3, #6
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	7cfb      	ldrb	r3, [r7, #19]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	7cbb      	ldrb	r3, [r7, #18]
 8000c26:	029b      	lsls	r3, r3, #10
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000c38:	8bfa      	ldrh	r2, [r7, #30]
 8000c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c3e:	3b09      	subs	r3, #9
 8000c40:	409a      	lsls	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000c4c:	e056      	b.n	8000cfc <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c54:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c5c:	e055      	b.n	8000d0a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000c5e:	f7ff fbe9 	bl	8000434 <SD_ReadyWait>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d14b      	bne.n	8000d00 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c6e:	e047      	b.n	8000d00 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000c70:	2100      	movs	r1, #0
 8000c72:	2049      	movs	r0, #73	; 0x49
 8000c74:	f7ff fce6 	bl	8000644 <SD_SendCmd>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d142      	bne.n	8000d04 <SD_disk_ioctl+0x244>
 8000c7e:	2110      	movs	r1, #16
 8000c80:	6a38      	ldr	r0, [r7, #32]
 8000c82:	f7ff fc55 	bl	8000530 <SD_RxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d03b      	beq.n	8000d04 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c92:	e037      	b.n	8000d04 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000c94:	2100      	movs	r1, #0
 8000c96:	204a      	movs	r0, #74	; 0x4a
 8000c98:	f7ff fcd4 	bl	8000644 <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d132      	bne.n	8000d08 <SD_disk_ioctl+0x248>
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	6a38      	ldr	r0, [r7, #32]
 8000ca6:	f7ff fc43 	bl	8000530 <SD_RxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02b      	beq.n	8000d08 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000cb6:	e027      	b.n	8000d08 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	207a      	movs	r0, #122	; 0x7a
 8000cbc:	f7ff fcc2 	bl	8000644 <SD_SendCmd>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ccc:	e00b      	b.n	8000ce6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000cce:	6a3c      	ldr	r4, [r7, #32]
 8000cd0:	1c63      	adds	r3, r4, #1
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	f7ff fb82 	bl	80003dc <SPI_RxByte>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d9ef      	bls.n	8000cce <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cfa:	e006      	b.n	8000d0a <SD_disk_ioctl+0x24a>
      break;
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <SD_disk_ioctl+0x24a>
      break;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <SD_disk_ioctl+0x24a>
      break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <SD_disk_ioctl+0x24a>
      break;
 8000d08:	bf00      	nop
    }

    DESELECT();
 8000d0a:	f7ff fb41 	bl	8000390 <DESELECT>
    SPI_RxByte();
 8000d0e:	f7ff fb65 	bl	80003dc <SPI_RxByte>
  }

  return res;
 8000d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	372c      	adds	r7, #44	; 0x2c
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000

08000d24 <trigger_alarm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void trigger_alarm(char* msg){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2108      	movs	r1, #8
 8000d30:	481f      	ldr	r0, [pc, #124]	; (8000db0 <trigger_alarm+0x8c>)
 8000d32:	f000 fe7c 	bl	8001a2e <HAL_GPIO_WritePin>
	//Encender Alarma
	sprintf(str_seg,"%u",segundos);
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <trigger_alarm+0x90>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	491e      	ldr	r1, [pc, #120]	; (8000db8 <trigger_alarm+0x94>)
 8000d3e:	481f      	ldr	r0, [pc, #124]	; (8000dbc <trigger_alarm+0x98>)
 8000d40:	f002 fa34 	bl	80031ac <siprintf>

	lcd_clear();
 8000d44:	f7ff fa9c 	bl	8000280 <lcd_clear>
	lcd_put_cur(0, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff faa2 	bl	8000294 <lcd_put_cur>
	lcd_send_string(msg);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fafb 	bl	800034c <lcd_send_string>
	lcd_put_cur(1, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fa9b 	bl	8000294 <lcd_put_cur>
	lcd_send_string(str_seg);
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <trigger_alarm+0x98>)
 8000d60:	f7ff faf4 	bl	800034c <lcd_send_string>


	if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)){
 8000d64:	2110      	movs	r1, #16
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <trigger_alarm+0x8c>)
 8000d68:	f000 fe4a 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d009      	beq.n	8000d86 <trigger_alarm+0x62>

		lcd_put_cur(1, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fa8d 	bl	8000294 <lcd_put_cur>
		lcd_send_string("Reinicio Contador");
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <trigger_alarm+0x9c>)
 8000d7c:	f7ff fae6 	bl	800034c <lcd_send_string>
		segundos=30;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <trigger_alarm+0x90>)
 8000d82:	221e      	movs	r2, #30
 8000d84:	601a      	str	r2, [r3, #0]
	}

	if(segundos==0){
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <trigger_alarm+0x90>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <trigger_alarm+0x70>
		status = OFF;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <trigger_alarm+0xa0>)
 8000d90:	2203      	movs	r2, #3
 8000d92:	701a      	strb	r2, [r3, #0]
	}
	segundos--;
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <trigger_alarm+0x90>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <trigger_alarm+0x90>)
 8000d9c:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 8000d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da2:	f000 fba1 	bl	80014e8 <HAL_Delay>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800
 8000db4:	20000004 	.word	0x20000004
 8000db8:	08003ab8 	.word	0x08003ab8
 8000dbc:	20000150 	.word	0x20000150
 8000dc0:	08003abc 	.word	0x08003abc
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fb2a 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f89a 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f964 	bl	80010a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dd8:	f000 f912 	bl	8001000 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000ddc:	f000 f8da 	bl	8000f94 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000de0:	f002 f8f0 	bl	8002fc4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000de4:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <main+0x11c>)
 8000de6:	f001 fe89 	bl	8002afc <HAL_TIM_Base_Start>

  // Initialize LCD
  lcd_init();
 8000dea:	f7ff fa72 	bl	80002d2 <lcd_init>
  lcd_put_cur(0, 2);
 8000dee:	2102      	movs	r1, #2
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fa4f 	bl	8000294 <lcd_put_cur>
  lcd_send_string("Motor Saver");
 8000df6:	483c      	ldr	r0, [pc, #240]	; (8000ee8 <main+0x120>)
 8000df8:	f7ff faa8 	bl	800034c <lcd_send_string>
  HAL_Delay(3000);
 8000dfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e00:	f000 fb72 	bl	80014e8 <HAL_Delay>
  lcd_clear();
 8000e04:	f7ff fa3c 	bl	8000280 <lcd_clear>

  // Initialize status of Relay
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4837      	ldr	r0, [pc, #220]	; (8000eec <main+0x124>)
 8000e0e:	f000 fe0e 	bl	8001a2e <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (status)
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <main+0x128>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d8fb      	bhi.n	8000e12 <main+0x4a>
 8000e1a:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <main+0x58>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e87 	.word	0x08000e87
 8000e24:	08000e8f 	.word	0x08000e8f
 8000e28:	08000e31 	.word	0x08000e31
 8000e2c:	08000e97 	.word	0x08000e97
	  {
	  	  case NORMAL:
	  		  // Set relay's status LOW, for relay NC
  		      HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2120      	movs	r1, #32
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <main+0x124>)
 8000e36:	f000 fdfa 	bl	8001a2e <HAL_GPIO_WritePin>
  		      HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	482b      	ldr	r0, [pc, #172]	; (8000eec <main+0x124>)
 8000e40:	f000 fdf5 	bl	8001a2e <HAL_GPIO_WritePin>

  		      // Read sensor
	  		  if(HAL_GPIO_ReadPin(Temp_GPIO_Port, Temp_Pin)){
 8000e44:	2102      	movs	r1, #2
 8000e46:	4829      	ldr	r0, [pc, #164]	; (8000eec <main+0x124>)
 8000e48:	f000 fdda 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <main+0x90>
	  			  status = ALARMED_BY_TEMPERATURE;
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <main+0x128>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  if(HAL_GPIO_ReadPin(Pres_GPIO_Port, Pres_Pin)){
 8000e58:	2104      	movs	r1, #4
 8000e5a:	4824      	ldr	r0, [pc, #144]	; (8000eec <main+0x124>)
 8000e5c:	f000 fdd0 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <main+0xa4>
	  			  status = ALARMED_BY_PRESSION;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <main+0x128>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  lcd_clear();
 8000e6c:	f7ff fa08 	bl	8000280 <lcd_clear>
	  		  lcd_put_cur(0, 0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fa0e 	bl	8000294 <lcd_put_cur>
	  		  lcd_send_string("ESTADO OK");
 8000e78:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <main+0x12c>)
 8000e7a:	f7ff fa67 	bl	800034c <lcd_send_string>
	  		  HAL_Delay(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f000 fb32 	bl	80014e8 <HAL_Delay>
	  		  break;
 8000e84:	e02d      	b.n	8000ee2 <main+0x11a>

	  	  case ALARMED_BY_TEMPERATURE:
	  		  trigger_alarm("TEMPERATURA ALTA");
 8000e86:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <main+0x130>)
 8000e88:	f7ff ff4c 	bl	8000d24 <trigger_alarm>
  		    	  status = OFF;
  		      }
  		      segundos--;
  		      HAL_Delay(1000);
  		      */
	  		  break;
 8000e8c:	e029      	b.n	8000ee2 <main+0x11a>

	  	  case ALARMED_BY_PRESSION:
	  		  trigger_alarm("PRESION ALTA");
 8000e8e:	481b      	ldr	r0, [pc, #108]	; (8000efc <main+0x134>)
 8000e90:	f7ff ff48 	bl	8000d24 <trigger_alarm>
  		    	  status = OFF;
  		      }
  		      segundos--;
  		      HAL_Delay(1000);
  		      */
	  		  break;
 8000e94:	e025      	b.n	8000ee2 <main+0x11a>

	  	  case OFF:
	  		  // Set relay's status HIGH -> This should interrupt current of motor
  		      HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <main+0x124>)
 8000e9c:	f000 fdc7 	bl	8001a2e <HAL_GPIO_WritePin>

  		      lcd_clear();
 8000ea0:	f7ff f9ee 	bl	8000280 <lcd_clear>
  		      lcd_put_cur(0, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff f9f4 	bl	8000294 <lcd_put_cur>
  		      lcd_send_string("MOTOR APAGADO");
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <main+0x138>)
 8000eae:	f7ff fa4d 	bl	800034c <lcd_send_string>
  		      HAL_Delay(100);
 8000eb2:	2064      	movs	r0, #100	; 0x64
 8000eb4:	f000 fb18 	bl	80014e8 <HAL_Delay>

  		      // Check sensors. If both are ok next status is NORMAL.
	  		  if(!HAL_GPIO_ReadPin(Temp_GPIO_Port, Temp_Pin) && !HAL_GPIO_ReadPin(Pres_GPIO_Port, Pres_Pin)){
 8000eb8:	2102      	movs	r1, #2
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <main+0x124>)
 8000ebc:	f000 fda0 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <main+0x118>
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <main+0x124>)
 8000eca:	f000 fd99 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d105      	bne.n	8000ee0 <main+0x118>
	  			  status = NORMAL;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <main+0x128>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	701a      	strb	r2, [r3, #0]
	  			  segundos = 30;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <main+0x13c>)
 8000edc:	221e      	movs	r2, #30
 8000ede:	601a      	str	r2, [r3, #0]
	  		  }
	  		  break;
 8000ee0:	bf00      	nop
	  switch (status)
 8000ee2:	e796      	b.n	8000e12 <main+0x4a>
 8000ee4:	20000108 	.word	0x20000108
 8000ee8:	08003ad0 	.word	0x08003ad0
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	08003adc 	.word	0x08003adc
 8000ef8:	08003ae8 	.word	0x08003ae8
 8000efc:	08003afc 	.word	0x08003afc
 8000f00:	08003b0c 	.word	0x08003b0c
 8000f04:	20000004 	.word	0x20000004

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	2228      	movs	r2, #40	; 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 f940 	bl	800319c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fd85 	bl	8001a60 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f5c:	f000 f900 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fff2 	bl	8001f64 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f86:	f000 f8eb 	bl	8001160 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3740      	adds	r7, #64	; 0x40
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <MX_SPI2_Init+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_SPI2_Init+0x64>)
 8000fe6:	f001 f923 	bl	8002230 <HAL_SPI_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ff0:	f000 f8b6 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000b0 	.word	0x200000b0
 8000ffc:	40003800 	.word	0x40003800

08001000 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_TIM1_Init+0x98>)
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <MX_TIM1_Init+0x9c>)
 8001020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_TIM1_Init+0x98>)
 8001024:	2247      	movs	r2, #71	; 0x47
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_TIM1_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_TIM1_Init+0x98>)
 8001030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_TIM1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_TIM1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_TIM1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_TIM1_Init+0x98>)
 800104a:	f001 fd07 	bl	8002a5c <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001054:	f000 f884 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_TIM1_Init+0x98>)
 8001066:	f001 fd93 	bl	8002b90 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001070:	f000 f876 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_TIM1_Init+0x98>)
 8001082:	f001 ff41 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800108c:	f000 f868 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000108 	.word	0x20000108
 800109c:	40012c00 	.word	0x40012c00

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_GPIO_Init+0xb4>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80010fc:	2200      	movs	r2, #0
 80010fe:	213e      	movs	r1, #62	; 0x3e
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_GPIO_Init+0xb8>)
 8001102:	f000 fc94 	bl	8001a2e <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001106:	2200      	movs	r2, #0
 8001108:	f241 31f8 	movw	r1, #5112	; 0x13f8
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_GPIO_Init+0xbc>)
 800110e:	f000 fc8e 	bl	8001a2e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001112:	233e      	movs	r3, #62	; 0x3e
 8001114:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_GPIO_Init+0xb8>)
 800112a:	f000 fae5 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800112e:	f241 33f8 	movw	r3, #5112	; 0x13f8
 8001132:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_GPIO_Init+0xbc>)
 8001148:	f000 fad6 	bl	80016f8 <HAL_GPIO_Init>

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_MspInit+0x5c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x5c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x60>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_MspInit+0x60>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <HAL_SPI_MspInit+0x8c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d131      	bne.n	8001254 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_SPI_MspInit+0x90>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_SPI_MspInit+0x90>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_SPI_MspInit+0x90>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_SPI_MspInit+0x90>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_SPI_MspInit+0x90>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_SPI_MspInit+0x90>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001220:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_SPI_MspInit+0x94>)
 8001236:	f000 fa5f 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800123a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_SPI_MspInit+0x94>)
 8001250:	f000 fa52 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40003800 	.word	0x40003800
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_TIM_Base_MspInit+0x34>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10b      	bne.n	8001292 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0x38>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_TIM_Base_MspInit+0x38>)
 8001280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_TIM_Base_MspInit+0x38>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40012c00 	.word	0x40012c00
 80012a0:	40021000 	.word	0x40021000

080012a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <SDTimer_Handler+0x3c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <SDTimer_Handler+0x1c>
		Timer1--;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <SDTimer_Handler+0x3c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SDTimer_Handler+0x3c>)
 80012be:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <SDTimer_Handler+0x40>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <SDTimer_Handler+0x34>
		Timer2--;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SDTimer_Handler+0x40>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <SDTimer_Handler+0x40>)
 80012d6:	701a      	strb	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000153 	.word	0x20000153
 80012e4:	20000154 	.word	0x20000154

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <SysTick_Handler+0x30>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <SysTick_Handler+0x30>)
 800133c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <SysTick_Handler+0x30>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b09      	cmp	r3, #9
 8001346:	d904      	bls.n	8001352 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Handler+0x30>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800134e:	f7ff ffa9 	bl	80012a4 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 f8ad 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000152 	.word	0x20000152

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f001 feda 	bl	8003148 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20005000 	.word	0x20005000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000158 	.word	0x20000158
 80013c8:	20000188 	.word	0x20000188

080013cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fe:	f7ff ffe5 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f001 fea7 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001406:	f7ff fcdf 	bl	8000dc8 <main>
  bx lr
 800140a:	4770      	bx	lr
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001414:	08003b78 	.word	0x08003b78
  ldr r2, =_sbss
 8001418:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800141c:	20000184 	.word	0x20000184

08001420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC1_2_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x28>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f92b 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fe94 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f935 	bl	80016de <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f90b 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	20000014 	.word	0x20000014
 80014ac:	20000010 	.word	0x20000010

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x1c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x20>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_IncTick+0x20>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000014 	.word	0x20000014
 80014d0:	2000015c 	.word	0x2000015c

080014d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <HAL_GetTick+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	2000015c 	.word	0x2000015c

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff fff0 	bl	80014d4 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffe0 	bl	80014d4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000014 	.word	0x20000014

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff90 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff49 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb0 	bl	800164c <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e169      	b.n	80019e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8158 	bne.w	80019da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a9a      	ldr	r2, [pc, #616]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d05e      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001734:	4a98      	ldr	r2, [pc, #608]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d875      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800173a:	4a98      	ldr	r2, [pc, #608]	; (800199c <HAL_GPIO_Init+0x2a4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d058      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001740:	4a96      	ldr	r2, [pc, #600]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d86f      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001746:	4a96      	ldr	r2, [pc, #600]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d052      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 800174c:	4a94      	ldr	r2, [pc, #592]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d869      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001752:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04c      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001758:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d863      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800175e:	4a92      	ldr	r2, [pc, #584]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d046      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001764:	4a90      	ldr	r2, [pc, #576]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d85d      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d82a      	bhi.n	80017c4 <HAL_GPIO_Init+0xcc>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d859      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_GPIO_Init+0x80>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017df 	.word	0x080017df
 8001784:	08001821 	.word	0x08001821
 8001788:	08001827 	.word	0x08001827
 800178c:	08001827 	.word	0x08001827
 8001790:	08001827 	.word	0x08001827
 8001794:	08001827 	.word	0x08001827
 8001798:	08001827 	.word	0x08001827
 800179c:	08001827 	.word	0x08001827
 80017a0:	08001827 	.word	0x08001827
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001827 	.word	0x08001827
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017e9 	.word	0x080017e9
 80017c4:	4a79      	ldr	r2, [pc, #484]	; (80019ac <HAL_GPIO_Init+0x2b4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e02c      	b.n	8001826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e029      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	3304      	adds	r3, #4
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e024      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3308      	adds	r3, #8
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e01f      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e01a      	b.n	8001828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fa:	2304      	movs	r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e013      	b.n	8001828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	611a      	str	r2, [r3, #16]
          break;
 8001812:	e009      	b.n	8001828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	615a      	str	r2, [r3, #20]
          break;
 800181e:	e003      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x130>
          break;
 8001826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d801      	bhi.n	8001832 <HAL_GPIO_Init+0x13a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_Init+0x13e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d802      	bhi.n	8001844 <HAL_GPIO_Init+0x14c>
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x152>
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	210f      	movs	r1, #15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80b1 	beq.w	80019da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_GPIO_Init+0x1ec>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <HAL_GPIO_Init+0x2c4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1e8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3d      	ldr	r2, [pc, #244]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018d4:	2303      	movs	r3, #3
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018d8:	2304      	movs	r3, #4
 80018da:	e004      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018dc:	2302      	movs	r3, #2
 80018de:	e002      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018e4:	2300      	movs	r3, #0
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	f002 0203 	and.w	r2, r2, #3
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f6:	492f      	ldr	r1, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	492c      	ldr	r1, [pc, #176]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4928      	ldr	r1, [pc, #160]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001928:	4013      	ands	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4922      	ldr	r1, [pc, #136]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	491e      	ldr	r1, [pc, #120]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001950:	4013      	ands	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	4914      	ldr	r1, [pc, #80]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001978:	4013      	ands	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d021      	beq.n	80019cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e021      	b.n	80019da <HAL_GPIO_Init+0x2e2>
 8001996:	bf00      	nop
 8001998:	10320000 	.word	0x10320000
 800199c:	10310000 	.word	0x10310000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	10210000 	.word	0x10210000
 80019a8:	10120000 	.word	0x10120000
 80019ac:	10110000 	.word	0x10110000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40010800 	.word	0x40010800
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40011400 	.word	0x40011400
 80019c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_GPIO_Init+0x304>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4909      	ldr	r1, [pc, #36]	; (80019fc <HAL_GPIO_Init+0x304>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f47f ae8e 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	372c      	adds	r7, #44	; 0x2c
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3e:	787b      	ldrb	r3, [r7, #1]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4a:	e003      	b.n	8001a54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	041a      	lsls	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	611a      	str	r2, [r3, #16]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e272      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
 8001a98:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x12c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e24c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x76>
 8001ac8:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xbc>
 8001b02:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fcca 	bl	80014d4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fcc6 	bl	80014d4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e200      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe4>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcb6 	bl	80014d4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcb2 	bl	80014d4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1ec      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x10c>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d063      	beq.n	8001c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
 8001bb2:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4939      	ldr	r1, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fc6b 	bl	80014d4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fc67 	bl	80014d4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e1a1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4927      	ldr	r1, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
 8001c34:	e015      	b.n	8001c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc4a 	bl	80014d4 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c44:	f7ff fc46 	bl	80014d4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e180      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03a      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc2a 	bl	80014d4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff fc26 	bl	80014d4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e160      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 faa6 	bl	80021f4 <RCC_Delay>
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc10 	bl	80014d4 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc0c 	bl	80014d4 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e146      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	42420000 	.word	0x42420000
 8001cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e9      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a6 	beq.w	8001e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10d      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fbcd 	bl	80014d4 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff fbc9 	bl	80014d4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e103      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4c8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x312>
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6e      	ldr	r2, [pc, #440]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e02d      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a66      	ldr	r2, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e01c      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x356>
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e00b      	b.n	8001dce <HAL_RCC_OscConfig+0x36e>
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a5a      	ldr	r2, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb7d 	bl	80014d4 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb79 	bl	80014d4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0b1      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ee      	beq.n	8001dde <HAL_RCC_OscConfig+0x37e>
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb67 	bl	80014d4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb63 	bl	80014d4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e09b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d061      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d146      	bne.n	8001eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fb37 	bl	80014d4 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff fb33 	bl	80014d4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e06d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4921      	ldr	r1, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a19      	ldr	r1, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb07 	bl	80014d4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff fb03 	bl	80014d4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x46a>
 8001ee8:	e035      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff faf0 	bl	80014d4 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff faec 	bl	80014d4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e026      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x498>
 8001f16:	e01e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e019      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x500>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7ff fa3e 	bl	80014d4 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fa3a 	bl	80014d4 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f99c 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	08003b2c 	.word	0x08003b2c
 8002130:	2000000c 	.word	0x2000000c
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b490      	push	{r4, r7}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002140:	1d3c      	adds	r4, r7, #4
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002148:	f240 2301 	movw	r3, #513	; 0x201
 800214c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x46>
 8002176:	e02b      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e02b      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3328      	adds	r3, #40	; 0x28
 8002188:	443b      	add	r3, r7
 800218a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800218e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d012      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c5b      	lsrs	r3, r3, #17
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	3328      	adds	r3, #40	; 0x28
 80021a6:	443b      	add	r3, r7
 80021a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b2:	fb03 f202 	mul.w	r2, r3, r2
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	e004      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	623b      	str	r3, [r7, #32]
      break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d2:	623b      	str	r3, [r7, #32]
      break;
 80021d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d6:	6a3b      	ldr	r3, [r7, #32]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc90      	pop	{r4, r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	08003b1c 	.word	0x08003b1c
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	003d0900 	.word	0x003d0900

080021f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <RCC_Delay+0x34>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <RCC_Delay+0x38>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a5b      	lsrs	r3, r3, #9
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002210:	bf00      	nop
  }
  while (Delay --);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1e5a      	subs	r2, r3, #1
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <RCC_Delay+0x1c>
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	2000000c 	.word	0x2000000c
 800222c:	10624dd3 	.word	0x10624dd3

08002230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e076      	b.n	8002330 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002252:	d009      	beq.n	8002268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
 800225a:	e005      	b.n	8002268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe ffa4 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	0c1a      	lsrs	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f002 0204 	and.w	r2, r2, #4
 800230e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_SPI_Transmit+0x22>
 8002356:	2302      	movs	r3, #2
 8002358:	e126      	b.n	80025a8 <HAL_SPI_Transmit+0x270>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002362:	f7ff f8b7 	bl	80014d4 <HAL_GetTick>
 8002366:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d002      	beq.n	800237e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002378:	2302      	movs	r3, #2
 800237a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800237c:	e10b      	b.n	8002596 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Transmit+0x52>
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800238e:	e102      	b.n	8002596 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	88fa      	ldrh	r2, [r7, #6]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d6:	d10f      	bne.n	80023f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d007      	beq.n	8002416 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800241e:	d14b      	bne.n	80024b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Transmit+0xf6>
 8002428:	8afb      	ldrh	r3, [r7, #22]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d13e      	bne.n	80024ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002452:	e02b      	b.n	80024ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d112      	bne.n	8002488 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	881a      	ldrh	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	1c9a      	adds	r2, r3, #2
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	86da      	strh	r2, [r3, #54]	; 0x36
 8002486:	e011      	b.n	80024ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002488:	f7ff f824 	bl	80014d4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d803      	bhi.n	80024a0 <HAL_SPI_Transmit+0x168>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249e:	d102      	bne.n	80024a6 <HAL_SPI_Transmit+0x16e>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024aa:	e074      	b.n	8002596 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ce      	bne.n	8002454 <HAL_SPI_Transmit+0x11c>
 80024b6:	e04c      	b.n	8002552 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_Transmit+0x18e>
 80024c0:	8afb      	ldrh	r3, [r7, #22]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d140      	bne.n	8002548 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024ec:	e02c      	b.n	8002548 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d113      	bne.n	8002524 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	86da      	strh	r2, [r3, #54]	; 0x36
 8002522:	e011      	b.n	8002548 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002524:	f7fe ffd6 	bl	80014d4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d803      	bhi.n	800253c <HAL_SPI_Transmit+0x204>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Transmit+0x20a>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002546:	e026      	b.n	8002596 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1cd      	bne.n	80024ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fa62 	bl	8002a20 <SPI_EndRxTxTransaction>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	77fb      	strb	r3, [r7, #31]
 8002592:	e000      	b.n	8002596 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002594:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025be:	2301      	movs	r3, #1
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_SPI_TransmitReceive+0x26>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e18a      	b.n	80028ec <HAL_SPI_TransmitReceive+0x33c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025de:	f7fe ff79 	bl	80014d4 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d00f      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x70>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002606:	d107      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x68>
 8002610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002614:	2b04      	cmp	r3, #4
 8002616:	d003      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002618:	2302      	movs	r3, #2
 800261a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800261e:	e15b      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x82>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x82>
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002638:	e14e      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b04      	cmp	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	887a      	ldrh	r2, [r7, #2]
 8002676:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d007      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026aa:	d178      	bne.n	800279e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x10a>
 80026b4:	8b7b      	ldrh	r3, [r7, #26]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d166      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	1c9a      	adds	r2, r3, #2
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026de:	e053      	b.n	8002788 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d11b      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x176>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x176>
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	881a      	ldrh	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	1c9a      	adds	r2, r3, #2
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d119      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x1b8>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	b292      	uxth	r2, r2
 800274a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	1c9a      	adds	r2, r3, #2
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002768:	f7fe feb4 	bl	80014d4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002774:	429a      	cmp	r2, r3
 8002776:	d807      	bhi.n	8002788 <HAL_SPI_TransmitReceive+0x1d8>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d003      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002786:	e0a7      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1a6      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x130>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1a1      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x130>
 800279c:	e07c      	b.n	8002898 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x1fc>
 80027a6:	8b7b      	ldrh	r3, [r7, #26]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d16b      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	7812      	ldrb	r2, [r2, #0]
 80027b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d2:	e057      	b.n	8002884 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d11c      	bne.n	800281c <HAL_SPI_TransmitReceive+0x26c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_SPI_TransmitReceive+0x26c>
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d114      	bne.n	800281c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d119      	bne.n	800285e <HAL_SPI_TransmitReceive+0x2ae>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d014      	beq.n	800285e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800285a:	2301      	movs	r3, #1
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800285e:	f7fe fe39 	bl	80014d4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800286a:	429a      	cmp	r2, r3
 800286c:	d803      	bhi.n	8002876 <HAL_SPI_TransmitReceive+0x2c6>
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d102      	bne.n	800287c <HAL_SPI_TransmitReceive+0x2cc>
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002882:	e029      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1a2      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x224>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d19d      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f8bf 	bl	8002a20 <SPI_EndRxTxTransaction>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028b4:	e010      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	e000      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002902:	b2db      	uxtb	r3, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002920:	f7fe fdd8 	bl	80014d4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	4413      	add	r3, r2
 800292e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002930:	f7fe fdd0 	bl	80014d4 <HAL_GetTick>
 8002934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	015b      	lsls	r3, r3, #5
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	e054      	b.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d050      	beq.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002950:	f7fe fdc0 	bl	80014d4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	d902      	bls.n	8002966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d13d      	bne.n	80029e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297e:	d111      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002988:	d004      	beq.n	8002994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d107      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d10f      	bne.n	80029ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e017      	b.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d19b      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff6a 	bl	8002910 <SPI_WaitFlagStateUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e000      	b.n	8002a54 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe fbf0 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 f93c 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_TIM_Base_Start+0x88>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00e      	beq.n	8002b44 <HAL_TIM_Base_Start+0x48>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIM_Base_Start+0x48>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIM_Base_Start+0x8c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_TIM_Base_Start+0x48>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_TIM_Base_Start+0x90>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d010      	beq.n	8002b78 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b66:	e007      	b.n	8002b78 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800

08002b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIM_ConfigClockSource+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0b3      	b.n	8002d10 <HAL_TIM_ConfigClockSource+0x180>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d03e      	beq.n	8002c60 <HAL_TIM_ConfigClockSource+0xd0>
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be6:	f200 8087 	bhi.w	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	f000 8085 	beq.w	8002cfc <HAL_TIM_ConfigClockSource+0x16c>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	d87f      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d01a      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xa2>
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d87b      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d050      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x116>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d877      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d03c      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0xf6>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d873      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d058      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x136>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d86f      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d064      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x156>
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d86b      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d060      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x156>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d867      	bhi.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05c      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x156>
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d05a      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c30:	e062      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6899      	ldr	r1, [r3, #8]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f000 f942 	bl	8002eca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	609a      	str	r2, [r3, #8]
      break;
 8002c5e:	e04e      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f000 f92b 	bl	8002eca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c82:	609a      	str	r2, [r3, #8]
      break;
 8002c84:	e03b      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f000 f8a2 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2150      	movs	r1, #80	; 0x50
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f8f9 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002ca4:	e02b      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 f8c0 	bl	8002e38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2160      	movs	r1, #96	; 0x60
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f8e9 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e01b      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 f882 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f8d9 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e00b      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 f8d0 	bl	8002e96 <TIM_ITRx_SetConfig>
        break;
 8002cf6:	e002      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d007      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <TIM_Base_SetConfig+0xbc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_Base_SetConfig+0x30>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <TIM_Base_SetConfig+0xc0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d108      	bne.n	8002d5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <TIM_Base_SetConfig+0xbc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a18      	ldr	r2, [pc, #96]	; (8002dd8 <TIM_Base_SetConfig+0xc0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <TIM_Base_SetConfig+0xb8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d103      	bne.n	8002dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800

08002ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 030a 	bic.w	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f023 0210 	bic.w	r2, r3, #16
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	621a      	str	r2, [r3, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 0307 	orr.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e046      	b.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d009      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10c      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <MX_FATFS_Init+0x18>)
 8002fca:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <MX_FATFS_Init+0x1c>)
 8002fcc:	f000 f8ac 	bl	8003128 <FATFS_LinkDriver>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <MX_FATFS_Init+0x20>)
 8002fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000164 	.word	0x20000164
 8002fe0:	20000018 	.word	0x20000018
 8002fe4:	20000160 	.word	0x20000160

08002fe8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fb77 	bl	80006e8 <SD_disk_initialize>
 8002ffa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fc53 	bl	80008bc <SD_disk_status>
 8003016:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003030:	7bf8      	ldrb	r0, [r7, #15]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	f7fd fc54 	bl	80008e4 <SD_disk_read>
 800303c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003056:	7bf8      	ldrb	r0, [r7, #15]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	f7fd fcab 	bl	80009b8 <SD_disk_write>
 8003062:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	603a      	str	r2, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	460b      	mov	r3, r1
 800307a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800307c:	79b9      	ldrb	r1, [r7, #6]
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fd1c 	bl	8000ac0 <SD_disk_ioctl>
 8003088:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030ac:	7a5b      	ldrb	r3, [r3, #9]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d831      	bhi.n	8003118 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030b6:	7a5b      	ldrb	r3, [r3, #9]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030c4:	7a5b      	ldrb	r3, [r3, #9]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4a16      	ldr	r2, [pc, #88]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030d4:	7a5b      	ldrb	r3, [r3, #9]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030dc:	4413      	add	r3, r2
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030e4:	7a5b      	ldrb	r3, [r3, #9]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	b2d1      	uxtb	r1, r2
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <FATFS_LinkDriverEx+0x90>)
 80030ee:	7251      	strb	r1, [r2, #9]
 80030f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80030f2:	7dbb      	ldrb	r3, [r7, #22]
 80030f4:	3330      	adds	r3, #48	; 0x30
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	223a      	movs	r2, #58	; 0x3a
 8003102:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3302      	adds	r3, #2
 8003108:	222f      	movs	r2, #47	; 0x2f
 800310a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3303      	adds	r3, #3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003118:	7dfb      	ldrb	r3, [r7, #23]
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	20000168 	.word	0x20000168

08003128 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffac 	bl	8003094 <FATFS_LinkDriverEx>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <__errno>:
 8003148:	4b01      	ldr	r3, [pc, #4]	; (8003150 <__errno+0x8>)
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	2000002c 	.word	0x2000002c

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	2600      	movs	r6, #0
 8003158:	4d0c      	ldr	r5, [pc, #48]	; (800318c <__libc_init_array+0x38>)
 800315a:	4c0d      	ldr	r4, [pc, #52]	; (8003190 <__libc_init_array+0x3c>)
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	f000 fc9c 	bl	8003aa0 <_init>
 8003168:	2600      	movs	r6, #0
 800316a:	4d0a      	ldr	r5, [pc, #40]	; (8003194 <__libc_init_array+0x40>)
 800316c:	4c0a      	ldr	r4, [pc, #40]	; (8003198 <__libc_init_array+0x44>)
 800316e:	1b64      	subs	r4, r4, r5
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	08003b70 	.word	0x08003b70
 8003190:	08003b70 	.word	0x08003b70
 8003194:	08003b70 	.word	0x08003b70
 8003198:	08003b74 	.word	0x08003b74

0800319c <memset>:
 800319c:	4603      	mov	r3, r0
 800319e:	4402      	add	r2, r0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <memset+0xa>
 80031a4:	4770      	bx	lr
 80031a6:	f803 1b01 	strb.w	r1, [r3], #1
 80031aa:	e7f9      	b.n	80031a0 <memset+0x4>

080031ac <siprintf>:
 80031ac:	b40e      	push	{r1, r2, r3}
 80031ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031b2:	b500      	push	{lr}
 80031b4:	b09c      	sub	sp, #112	; 0x70
 80031b6:	ab1d      	add	r3, sp, #116	; 0x74
 80031b8:	9002      	str	r0, [sp, #8]
 80031ba:	9006      	str	r0, [sp, #24]
 80031bc:	9107      	str	r1, [sp, #28]
 80031be:	9104      	str	r1, [sp, #16]
 80031c0:	4808      	ldr	r0, [pc, #32]	; (80031e4 <siprintf+0x38>)
 80031c2:	4909      	ldr	r1, [pc, #36]	; (80031e8 <siprintf+0x3c>)
 80031c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c8:	9105      	str	r1, [sp, #20]
 80031ca:	6800      	ldr	r0, [r0, #0]
 80031cc:	a902      	add	r1, sp, #8
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f000 f868 	bl	80032a4 <_svfiprintf_r>
 80031d4:	2200      	movs	r2, #0
 80031d6:	9b02      	ldr	r3, [sp, #8]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	b01c      	add	sp, #112	; 0x70
 80031dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e0:	b003      	add	sp, #12
 80031e2:	4770      	bx	lr
 80031e4:	2000002c 	.word	0x2000002c
 80031e8:	ffff0208 	.word	0xffff0208

080031ec <__ssputs_r>:
 80031ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f0:	688e      	ldr	r6, [r1, #8]
 80031f2:	4682      	mov	sl, r0
 80031f4:	429e      	cmp	r6, r3
 80031f6:	460c      	mov	r4, r1
 80031f8:	4690      	mov	r8, r2
 80031fa:	461f      	mov	r7, r3
 80031fc:	d838      	bhi.n	8003270 <__ssputs_r+0x84>
 80031fe:	898a      	ldrh	r2, [r1, #12]
 8003200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003204:	d032      	beq.n	800326c <__ssputs_r+0x80>
 8003206:	6825      	ldr	r5, [r4, #0]
 8003208:	6909      	ldr	r1, [r1, #16]
 800320a:	3301      	adds	r3, #1
 800320c:	eba5 0901 	sub.w	r9, r5, r1
 8003210:	6965      	ldr	r5, [r4, #20]
 8003212:	444b      	add	r3, r9
 8003214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800321c:	106d      	asrs	r5, r5, #1
 800321e:	429d      	cmp	r5, r3
 8003220:	bf38      	it	cc
 8003222:	461d      	movcc	r5, r3
 8003224:	0553      	lsls	r3, r2, #21
 8003226:	d531      	bpl.n	800328c <__ssputs_r+0xa0>
 8003228:	4629      	mov	r1, r5
 800322a:	f000 fb6f 	bl	800390c <_malloc_r>
 800322e:	4606      	mov	r6, r0
 8003230:	b950      	cbnz	r0, 8003248 <__ssputs_r+0x5c>
 8003232:	230c      	movs	r3, #12
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f8ca 3000 	str.w	r3, [sl]
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003242:	81a3      	strh	r3, [r4, #12]
 8003244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003248:	464a      	mov	r2, r9
 800324a:	6921      	ldr	r1, [r4, #16]
 800324c:	f000 face 	bl	80037ec <memcpy>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	6126      	str	r6, [r4, #16]
 800325e:	444e      	add	r6, r9
 8003260:	6026      	str	r6, [r4, #0]
 8003262:	463e      	mov	r6, r7
 8003264:	6165      	str	r5, [r4, #20]
 8003266:	eba5 0509 	sub.w	r5, r5, r9
 800326a:	60a5      	str	r5, [r4, #8]
 800326c:	42be      	cmp	r6, r7
 800326e:	d900      	bls.n	8003272 <__ssputs_r+0x86>
 8003270:	463e      	mov	r6, r7
 8003272:	4632      	mov	r2, r6
 8003274:	4641      	mov	r1, r8
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	f000 fac6 	bl	8003808 <memmove>
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	2000      	movs	r0, #0
 8003280:	1b9b      	subs	r3, r3, r6
 8003282:	60a3      	str	r3, [r4, #8]
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	4433      	add	r3, r6
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	e7db      	b.n	8003244 <__ssputs_r+0x58>
 800328c:	462a      	mov	r2, r5
 800328e:	f000 fbb1 	bl	80039f4 <_realloc_r>
 8003292:	4606      	mov	r6, r0
 8003294:	2800      	cmp	r0, #0
 8003296:	d1e1      	bne.n	800325c <__ssputs_r+0x70>
 8003298:	4650      	mov	r0, sl
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	f000 face 	bl	800383c <_free_r>
 80032a0:	e7c7      	b.n	8003232 <__ssputs_r+0x46>
	...

080032a4 <_svfiprintf_r>:
 80032a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a8:	4698      	mov	r8, r3
 80032aa:	898b      	ldrh	r3, [r1, #12]
 80032ac:	4607      	mov	r7, r0
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	460d      	mov	r5, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	b09d      	sub	sp, #116	; 0x74
 80032b6:	d50e      	bpl.n	80032d6 <_svfiprintf_r+0x32>
 80032b8:	690b      	ldr	r3, [r1, #16]
 80032ba:	b963      	cbnz	r3, 80032d6 <_svfiprintf_r+0x32>
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	f000 fb25 	bl	800390c <_malloc_r>
 80032c2:	6028      	str	r0, [r5, #0]
 80032c4:	6128      	str	r0, [r5, #16]
 80032c6:	b920      	cbnz	r0, 80032d2 <_svfiprintf_r+0x2e>
 80032c8:	230c      	movs	r3, #12
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	e0d1      	b.n	8003476 <_svfiprintf_r+0x1d2>
 80032d2:	2340      	movs	r3, #64	; 0x40
 80032d4:	616b      	str	r3, [r5, #20]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9309      	str	r3, [sp, #36]	; 0x24
 80032da:	2320      	movs	r3, #32
 80032dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032e0:	2330      	movs	r3, #48	; 0x30
 80032e2:	f04f 0901 	mov.w	r9, #1
 80032e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003490 <_svfiprintf_r+0x1ec>
 80032ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032f2:	4623      	mov	r3, r4
 80032f4:	469a      	mov	sl, r3
 80032f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032fa:	b10a      	cbz	r2, 8003300 <_svfiprintf_r+0x5c>
 80032fc:	2a25      	cmp	r2, #37	; 0x25
 80032fe:	d1f9      	bne.n	80032f4 <_svfiprintf_r+0x50>
 8003300:	ebba 0b04 	subs.w	fp, sl, r4
 8003304:	d00b      	beq.n	800331e <_svfiprintf_r+0x7a>
 8003306:	465b      	mov	r3, fp
 8003308:	4622      	mov	r2, r4
 800330a:	4629      	mov	r1, r5
 800330c:	4638      	mov	r0, r7
 800330e:	f7ff ff6d 	bl	80031ec <__ssputs_r>
 8003312:	3001      	adds	r0, #1
 8003314:	f000 80aa 	beq.w	800346c <_svfiprintf_r+0x1c8>
 8003318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800331a:	445a      	add	r2, fp
 800331c:	9209      	str	r2, [sp, #36]	; 0x24
 800331e:	f89a 3000 	ldrb.w	r3, [sl]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a2 	beq.w	800346c <_svfiprintf_r+0x1c8>
 8003328:	2300      	movs	r3, #0
 800332a:	f04f 32ff 	mov.w	r2, #4294967295
 800332e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003332:	f10a 0a01 	add.w	sl, sl, #1
 8003336:	9304      	str	r3, [sp, #16]
 8003338:	9307      	str	r3, [sp, #28]
 800333a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800333e:	931a      	str	r3, [sp, #104]	; 0x68
 8003340:	4654      	mov	r4, sl
 8003342:	2205      	movs	r2, #5
 8003344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003348:	4851      	ldr	r0, [pc, #324]	; (8003490 <_svfiprintf_r+0x1ec>)
 800334a:	f000 fa41 	bl	80037d0 <memchr>
 800334e:	9a04      	ldr	r2, [sp, #16]
 8003350:	b9d8      	cbnz	r0, 800338a <_svfiprintf_r+0xe6>
 8003352:	06d0      	lsls	r0, r2, #27
 8003354:	bf44      	itt	mi
 8003356:	2320      	movmi	r3, #32
 8003358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800335c:	0711      	lsls	r1, r2, #28
 800335e:	bf44      	itt	mi
 8003360:	232b      	movmi	r3, #43	; 0x2b
 8003362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003366:	f89a 3000 	ldrb.w	r3, [sl]
 800336a:	2b2a      	cmp	r3, #42	; 0x2a
 800336c:	d015      	beq.n	800339a <_svfiprintf_r+0xf6>
 800336e:	4654      	mov	r4, sl
 8003370:	2000      	movs	r0, #0
 8003372:	f04f 0c0a 	mov.w	ip, #10
 8003376:	9a07      	ldr	r2, [sp, #28]
 8003378:	4621      	mov	r1, r4
 800337a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800337e:	3b30      	subs	r3, #48	; 0x30
 8003380:	2b09      	cmp	r3, #9
 8003382:	d94e      	bls.n	8003422 <_svfiprintf_r+0x17e>
 8003384:	b1b0      	cbz	r0, 80033b4 <_svfiprintf_r+0x110>
 8003386:	9207      	str	r2, [sp, #28]
 8003388:	e014      	b.n	80033b4 <_svfiprintf_r+0x110>
 800338a:	eba0 0308 	sub.w	r3, r0, r8
 800338e:	fa09 f303 	lsl.w	r3, r9, r3
 8003392:	4313      	orrs	r3, r2
 8003394:	46a2      	mov	sl, r4
 8003396:	9304      	str	r3, [sp, #16]
 8003398:	e7d2      	b.n	8003340 <_svfiprintf_r+0x9c>
 800339a:	9b03      	ldr	r3, [sp, #12]
 800339c:	1d19      	adds	r1, r3, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	9103      	str	r1, [sp, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfbb      	ittet	lt
 80033a6:	425b      	neglt	r3, r3
 80033a8:	f042 0202 	orrlt.w	r2, r2, #2
 80033ac:	9307      	strge	r3, [sp, #28]
 80033ae:	9307      	strlt	r3, [sp, #28]
 80033b0:	bfb8      	it	lt
 80033b2:	9204      	strlt	r2, [sp, #16]
 80033b4:	7823      	ldrb	r3, [r4, #0]
 80033b6:	2b2e      	cmp	r3, #46	; 0x2e
 80033b8:	d10c      	bne.n	80033d4 <_svfiprintf_r+0x130>
 80033ba:	7863      	ldrb	r3, [r4, #1]
 80033bc:	2b2a      	cmp	r3, #42	; 0x2a
 80033be:	d135      	bne.n	800342c <_svfiprintf_r+0x188>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	3402      	adds	r4, #2
 80033c4:	1d1a      	adds	r2, r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	9203      	str	r2, [sp, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfb8      	it	lt
 80033ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80033d2:	9305      	str	r3, [sp, #20]
 80033d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003494 <_svfiprintf_r+0x1f0>
 80033d8:	2203      	movs	r2, #3
 80033da:	4650      	mov	r0, sl
 80033dc:	7821      	ldrb	r1, [r4, #0]
 80033de:	f000 f9f7 	bl	80037d0 <memchr>
 80033e2:	b140      	cbz	r0, 80033f6 <_svfiprintf_r+0x152>
 80033e4:	2340      	movs	r3, #64	; 0x40
 80033e6:	eba0 000a 	sub.w	r0, r0, sl
 80033ea:	fa03 f000 	lsl.w	r0, r3, r0
 80033ee:	9b04      	ldr	r3, [sp, #16]
 80033f0:	3401      	adds	r4, #1
 80033f2:	4303      	orrs	r3, r0
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fa:	2206      	movs	r2, #6
 80033fc:	4826      	ldr	r0, [pc, #152]	; (8003498 <_svfiprintf_r+0x1f4>)
 80033fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003402:	f000 f9e5 	bl	80037d0 <memchr>
 8003406:	2800      	cmp	r0, #0
 8003408:	d038      	beq.n	800347c <_svfiprintf_r+0x1d8>
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <_svfiprintf_r+0x1f8>)
 800340c:	bb1b      	cbnz	r3, 8003456 <_svfiprintf_r+0x1b2>
 800340e:	9b03      	ldr	r3, [sp, #12]
 8003410:	3307      	adds	r3, #7
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	3308      	adds	r3, #8
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341c:	4433      	add	r3, r6
 800341e:	9309      	str	r3, [sp, #36]	; 0x24
 8003420:	e767      	b.n	80032f2 <_svfiprintf_r+0x4e>
 8003422:	460c      	mov	r4, r1
 8003424:	2001      	movs	r0, #1
 8003426:	fb0c 3202 	mla	r2, ip, r2, r3
 800342a:	e7a5      	b.n	8003378 <_svfiprintf_r+0xd4>
 800342c:	2300      	movs	r3, #0
 800342e:	f04f 0c0a 	mov.w	ip, #10
 8003432:	4619      	mov	r1, r3
 8003434:	3401      	adds	r4, #1
 8003436:	9305      	str	r3, [sp, #20]
 8003438:	4620      	mov	r0, r4
 800343a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800343e:	3a30      	subs	r2, #48	; 0x30
 8003440:	2a09      	cmp	r2, #9
 8003442:	d903      	bls.n	800344c <_svfiprintf_r+0x1a8>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0c5      	beq.n	80033d4 <_svfiprintf_r+0x130>
 8003448:	9105      	str	r1, [sp, #20]
 800344a:	e7c3      	b.n	80033d4 <_svfiprintf_r+0x130>
 800344c:	4604      	mov	r4, r0
 800344e:	2301      	movs	r3, #1
 8003450:	fb0c 2101 	mla	r1, ip, r1, r2
 8003454:	e7f0      	b.n	8003438 <_svfiprintf_r+0x194>
 8003456:	ab03      	add	r3, sp, #12
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	462a      	mov	r2, r5
 800345c:	4638      	mov	r0, r7
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <_svfiprintf_r+0x1fc>)
 8003460:	a904      	add	r1, sp, #16
 8003462:	f3af 8000 	nop.w
 8003466:	1c42      	adds	r2, r0, #1
 8003468:	4606      	mov	r6, r0
 800346a:	d1d6      	bne.n	800341a <_svfiprintf_r+0x176>
 800346c:	89ab      	ldrh	r3, [r5, #12]
 800346e:	065b      	lsls	r3, r3, #25
 8003470:	f53f af2c 	bmi.w	80032cc <_svfiprintf_r+0x28>
 8003474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003476:	b01d      	add	sp, #116	; 0x74
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	ab03      	add	r3, sp, #12
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	462a      	mov	r2, r5
 8003482:	4638      	mov	r0, r7
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <_svfiprintf_r+0x1fc>)
 8003486:	a904      	add	r1, sp, #16
 8003488:	f000 f87c 	bl	8003584 <_printf_i>
 800348c:	e7eb      	b.n	8003466 <_svfiprintf_r+0x1c2>
 800348e:	bf00      	nop
 8003490:	08003b3c 	.word	0x08003b3c
 8003494:	08003b42 	.word	0x08003b42
 8003498:	08003b46 	.word	0x08003b46
 800349c:	00000000 	.word	0x00000000
 80034a0:	080031ed 	.word	0x080031ed

080034a4 <_printf_common>:
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	4616      	mov	r6, r2
 80034aa:	4699      	mov	r9, r3
 80034ac:	688a      	ldr	r2, [r1, #8]
 80034ae:	690b      	ldr	r3, [r1, #16]
 80034b0:	4607      	mov	r7, r0
 80034b2:	4293      	cmp	r3, r2
 80034b4:	bfb8      	it	lt
 80034b6:	4613      	movlt	r3, r2
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034be:	460c      	mov	r4, r1
 80034c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c4:	b10a      	cbz	r2, 80034ca <_printf_common+0x26>
 80034c6:	3301      	adds	r3, #1
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	0699      	lsls	r1, r3, #26
 80034ce:	bf42      	ittt	mi
 80034d0:	6833      	ldrmi	r3, [r6, #0]
 80034d2:	3302      	addmi	r3, #2
 80034d4:	6033      	strmi	r3, [r6, #0]
 80034d6:	6825      	ldr	r5, [r4, #0]
 80034d8:	f015 0506 	ands.w	r5, r5, #6
 80034dc:	d106      	bne.n	80034ec <_printf_common+0x48>
 80034de:	f104 0a19 	add.w	sl, r4, #25
 80034e2:	68e3      	ldr	r3, [r4, #12]
 80034e4:	6832      	ldr	r2, [r6, #0]
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	42ab      	cmp	r3, r5
 80034ea:	dc28      	bgt.n	800353e <_printf_common+0x9a>
 80034ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034f0:	1e13      	subs	r3, r2, #0
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	bf18      	it	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	0692      	lsls	r2, r2, #26
 80034fa:	d42d      	bmi.n	8003558 <_printf_common+0xb4>
 80034fc:	4649      	mov	r1, r9
 80034fe:	4638      	mov	r0, r7
 8003500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003504:	47c0      	blx	r8
 8003506:	3001      	adds	r0, #1
 8003508:	d020      	beq.n	800354c <_printf_common+0xa8>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	68e5      	ldr	r5, [r4, #12]
 800350e:	f003 0306 	and.w	r3, r3, #6
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf18      	it	ne
 8003516:	2500      	movne	r5, #0
 8003518:	6832      	ldr	r2, [r6, #0]
 800351a:	f04f 0600 	mov.w	r6, #0
 800351e:	68a3      	ldr	r3, [r4, #8]
 8003520:	bf08      	it	eq
 8003522:	1aad      	subeq	r5, r5, r2
 8003524:	6922      	ldr	r2, [r4, #16]
 8003526:	bf08      	it	eq
 8003528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800352c:	4293      	cmp	r3, r2
 800352e:	bfc4      	itt	gt
 8003530:	1a9b      	subgt	r3, r3, r2
 8003532:	18ed      	addgt	r5, r5, r3
 8003534:	341a      	adds	r4, #26
 8003536:	42b5      	cmp	r5, r6
 8003538:	d11a      	bne.n	8003570 <_printf_common+0xcc>
 800353a:	2000      	movs	r0, #0
 800353c:	e008      	b.n	8003550 <_printf_common+0xac>
 800353e:	2301      	movs	r3, #1
 8003540:	4652      	mov	r2, sl
 8003542:	4649      	mov	r1, r9
 8003544:	4638      	mov	r0, r7
 8003546:	47c0      	blx	r8
 8003548:	3001      	adds	r0, #1
 800354a:	d103      	bne.n	8003554 <_printf_common+0xb0>
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003554:	3501      	adds	r5, #1
 8003556:	e7c4      	b.n	80034e2 <_printf_common+0x3e>
 8003558:	2030      	movs	r0, #48	; 0x30
 800355a:	18e1      	adds	r1, r4, r3
 800355c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003566:	4422      	add	r2, r4
 8003568:	3302      	adds	r3, #2
 800356a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800356e:	e7c5      	b.n	80034fc <_printf_common+0x58>
 8003570:	2301      	movs	r3, #1
 8003572:	4622      	mov	r2, r4
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	47c0      	blx	r8
 800357a:	3001      	adds	r0, #1
 800357c:	d0e6      	beq.n	800354c <_printf_common+0xa8>
 800357e:	3601      	adds	r6, #1
 8003580:	e7d9      	b.n	8003536 <_printf_common+0x92>
	...

08003584 <_printf_i>:
 8003584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	7e0f      	ldrb	r7, [r1, #24]
 800358a:	4691      	mov	r9, r2
 800358c:	2f78      	cmp	r7, #120	; 0x78
 800358e:	4680      	mov	r8, r0
 8003590:	460c      	mov	r4, r1
 8003592:	469a      	mov	sl, r3
 8003594:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800359a:	d807      	bhi.n	80035ac <_printf_i+0x28>
 800359c:	2f62      	cmp	r7, #98	; 0x62
 800359e:	d80a      	bhi.n	80035b6 <_printf_i+0x32>
 80035a0:	2f00      	cmp	r7, #0
 80035a2:	f000 80d9 	beq.w	8003758 <_printf_i+0x1d4>
 80035a6:	2f58      	cmp	r7, #88	; 0x58
 80035a8:	f000 80a4 	beq.w	80036f4 <_printf_i+0x170>
 80035ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035b4:	e03a      	b.n	800362c <_printf_i+0xa8>
 80035b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035ba:	2b15      	cmp	r3, #21
 80035bc:	d8f6      	bhi.n	80035ac <_printf_i+0x28>
 80035be:	a101      	add	r1, pc, #4	; (adr r1, 80035c4 <_printf_i+0x40>)
 80035c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035c4:	0800361d 	.word	0x0800361d
 80035c8:	08003631 	.word	0x08003631
 80035cc:	080035ad 	.word	0x080035ad
 80035d0:	080035ad 	.word	0x080035ad
 80035d4:	080035ad 	.word	0x080035ad
 80035d8:	080035ad 	.word	0x080035ad
 80035dc:	08003631 	.word	0x08003631
 80035e0:	080035ad 	.word	0x080035ad
 80035e4:	080035ad 	.word	0x080035ad
 80035e8:	080035ad 	.word	0x080035ad
 80035ec:	080035ad 	.word	0x080035ad
 80035f0:	0800373f 	.word	0x0800373f
 80035f4:	08003661 	.word	0x08003661
 80035f8:	08003721 	.word	0x08003721
 80035fc:	080035ad 	.word	0x080035ad
 8003600:	080035ad 	.word	0x080035ad
 8003604:	08003761 	.word	0x08003761
 8003608:	080035ad 	.word	0x080035ad
 800360c:	08003661 	.word	0x08003661
 8003610:	080035ad 	.word	0x080035ad
 8003614:	080035ad 	.word	0x080035ad
 8003618:	08003729 	.word	0x08003729
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	602a      	str	r2, [r5, #0]
 8003624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800362c:	2301      	movs	r3, #1
 800362e:	e0a4      	b.n	800377a <_printf_i+0x1f6>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	6829      	ldr	r1, [r5, #0]
 8003634:	0606      	lsls	r6, r0, #24
 8003636:	f101 0304 	add.w	r3, r1, #4
 800363a:	d50a      	bpl.n	8003652 <_printf_i+0xce>
 800363c:	680e      	ldr	r6, [r1, #0]
 800363e:	602b      	str	r3, [r5, #0]
 8003640:	2e00      	cmp	r6, #0
 8003642:	da03      	bge.n	800364c <_printf_i+0xc8>
 8003644:	232d      	movs	r3, #45	; 0x2d
 8003646:	4276      	negs	r6, r6
 8003648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800364c:	230a      	movs	r3, #10
 800364e:	485e      	ldr	r0, [pc, #376]	; (80037c8 <_printf_i+0x244>)
 8003650:	e019      	b.n	8003686 <_printf_i+0x102>
 8003652:	680e      	ldr	r6, [r1, #0]
 8003654:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	bf18      	it	ne
 800365c:	b236      	sxthne	r6, r6
 800365e:	e7ef      	b.n	8003640 <_printf_i+0xbc>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	1d19      	adds	r1, r3, #4
 8003666:	6029      	str	r1, [r5, #0]
 8003668:	0601      	lsls	r1, r0, #24
 800366a:	d501      	bpl.n	8003670 <_printf_i+0xec>
 800366c:	681e      	ldr	r6, [r3, #0]
 800366e:	e002      	b.n	8003676 <_printf_i+0xf2>
 8003670:	0646      	lsls	r6, r0, #25
 8003672:	d5fb      	bpl.n	800366c <_printf_i+0xe8>
 8003674:	881e      	ldrh	r6, [r3, #0]
 8003676:	2f6f      	cmp	r7, #111	; 0x6f
 8003678:	bf0c      	ite	eq
 800367a:	2308      	moveq	r3, #8
 800367c:	230a      	movne	r3, #10
 800367e:	4852      	ldr	r0, [pc, #328]	; (80037c8 <_printf_i+0x244>)
 8003680:	2100      	movs	r1, #0
 8003682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003686:	6865      	ldr	r5, [r4, #4]
 8003688:	2d00      	cmp	r5, #0
 800368a:	bfa8      	it	ge
 800368c:	6821      	ldrge	r1, [r4, #0]
 800368e:	60a5      	str	r5, [r4, #8]
 8003690:	bfa4      	itt	ge
 8003692:	f021 0104 	bicge.w	r1, r1, #4
 8003696:	6021      	strge	r1, [r4, #0]
 8003698:	b90e      	cbnz	r6, 800369e <_printf_i+0x11a>
 800369a:	2d00      	cmp	r5, #0
 800369c:	d04d      	beq.n	800373a <_printf_i+0x1b6>
 800369e:	4615      	mov	r5, r2
 80036a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80036a4:	fb03 6711 	mls	r7, r3, r1, r6
 80036a8:	5dc7      	ldrb	r7, [r0, r7]
 80036aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036ae:	4637      	mov	r7, r6
 80036b0:	42bb      	cmp	r3, r7
 80036b2:	460e      	mov	r6, r1
 80036b4:	d9f4      	bls.n	80036a0 <_printf_i+0x11c>
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d10b      	bne.n	80036d2 <_printf_i+0x14e>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	07de      	lsls	r6, r3, #31
 80036be:	d508      	bpl.n	80036d2 <_printf_i+0x14e>
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	6861      	ldr	r1, [r4, #4]
 80036c4:	4299      	cmp	r1, r3
 80036c6:	bfde      	ittt	le
 80036c8:	2330      	movle	r3, #48	; 0x30
 80036ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036d2:	1b52      	subs	r2, r2, r5
 80036d4:	6122      	str	r2, [r4, #16]
 80036d6:	464b      	mov	r3, r9
 80036d8:	4621      	mov	r1, r4
 80036da:	4640      	mov	r0, r8
 80036dc:	f8cd a000 	str.w	sl, [sp]
 80036e0:	aa03      	add	r2, sp, #12
 80036e2:	f7ff fedf 	bl	80034a4 <_printf_common>
 80036e6:	3001      	adds	r0, #1
 80036e8:	d14c      	bne.n	8003784 <_printf_i+0x200>
 80036ea:	f04f 30ff 	mov.w	r0, #4294967295
 80036ee:	b004      	add	sp, #16
 80036f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f4:	4834      	ldr	r0, [pc, #208]	; (80037c8 <_printf_i+0x244>)
 80036f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036fa:	6829      	ldr	r1, [r5, #0]
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003702:	6029      	str	r1, [r5, #0]
 8003704:	061d      	lsls	r5, r3, #24
 8003706:	d514      	bpl.n	8003732 <_printf_i+0x1ae>
 8003708:	07df      	lsls	r7, r3, #31
 800370a:	bf44      	itt	mi
 800370c:	f043 0320 	orrmi.w	r3, r3, #32
 8003710:	6023      	strmi	r3, [r4, #0]
 8003712:	b91e      	cbnz	r6, 800371c <_printf_i+0x198>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	f023 0320 	bic.w	r3, r3, #32
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	2310      	movs	r3, #16
 800371e:	e7af      	b.n	8003680 <_printf_i+0xfc>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	f043 0320 	orr.w	r3, r3, #32
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	2378      	movs	r3, #120	; 0x78
 800372a:	4828      	ldr	r0, [pc, #160]	; (80037cc <_printf_i+0x248>)
 800372c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003730:	e7e3      	b.n	80036fa <_printf_i+0x176>
 8003732:	0659      	lsls	r1, r3, #25
 8003734:	bf48      	it	mi
 8003736:	b2b6      	uxthmi	r6, r6
 8003738:	e7e6      	b.n	8003708 <_printf_i+0x184>
 800373a:	4615      	mov	r5, r2
 800373c:	e7bb      	b.n	80036b6 <_printf_i+0x132>
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	6826      	ldr	r6, [r4, #0]
 8003742:	1d18      	adds	r0, r3, #4
 8003744:	6961      	ldr	r1, [r4, #20]
 8003746:	6028      	str	r0, [r5, #0]
 8003748:	0635      	lsls	r5, r6, #24
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	d501      	bpl.n	8003752 <_printf_i+0x1ce>
 800374e:	6019      	str	r1, [r3, #0]
 8003750:	e002      	b.n	8003758 <_printf_i+0x1d4>
 8003752:	0670      	lsls	r0, r6, #25
 8003754:	d5fb      	bpl.n	800374e <_printf_i+0x1ca>
 8003756:	8019      	strh	r1, [r3, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	4615      	mov	r5, r2
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	e7ba      	b.n	80036d6 <_printf_i+0x152>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	1d1a      	adds	r2, r3, #4
 8003766:	602a      	str	r2, [r5, #0]
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	6862      	ldr	r2, [r4, #4]
 800376c:	4628      	mov	r0, r5
 800376e:	f000 f82f 	bl	80037d0 <memchr>
 8003772:	b108      	cbz	r0, 8003778 <_printf_i+0x1f4>
 8003774:	1b40      	subs	r0, r0, r5
 8003776:	6060      	str	r0, [r4, #4]
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003782:	e7a8      	b.n	80036d6 <_printf_i+0x152>
 8003784:	462a      	mov	r2, r5
 8003786:	4649      	mov	r1, r9
 8003788:	4640      	mov	r0, r8
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	47d0      	blx	sl
 800378e:	3001      	adds	r0, #1
 8003790:	d0ab      	beq.n	80036ea <_printf_i+0x166>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	079b      	lsls	r3, r3, #30
 8003796:	d413      	bmi.n	80037c0 <_printf_i+0x23c>
 8003798:	68e0      	ldr	r0, [r4, #12]
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	4298      	cmp	r0, r3
 800379e:	bfb8      	it	lt
 80037a0:	4618      	movlt	r0, r3
 80037a2:	e7a4      	b.n	80036ee <_printf_i+0x16a>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4632      	mov	r2, r6
 80037a8:	4649      	mov	r1, r9
 80037aa:	4640      	mov	r0, r8
 80037ac:	47d0      	blx	sl
 80037ae:	3001      	adds	r0, #1
 80037b0:	d09b      	beq.n	80036ea <_printf_i+0x166>
 80037b2:	3501      	adds	r5, #1
 80037b4:	68e3      	ldr	r3, [r4, #12]
 80037b6:	9903      	ldr	r1, [sp, #12]
 80037b8:	1a5b      	subs	r3, r3, r1
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	dcf2      	bgt.n	80037a4 <_printf_i+0x220>
 80037be:	e7eb      	b.n	8003798 <_printf_i+0x214>
 80037c0:	2500      	movs	r5, #0
 80037c2:	f104 0619 	add.w	r6, r4, #25
 80037c6:	e7f5      	b.n	80037b4 <_printf_i+0x230>
 80037c8:	08003b4d 	.word	0x08003b4d
 80037cc:	08003b5e 	.word	0x08003b5e

080037d0 <memchr>:
 80037d0:	4603      	mov	r3, r0
 80037d2:	b510      	push	{r4, lr}
 80037d4:	b2c9      	uxtb	r1, r1
 80037d6:	4402      	add	r2, r0
 80037d8:	4293      	cmp	r3, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	d101      	bne.n	80037e2 <memchr+0x12>
 80037de:	2000      	movs	r0, #0
 80037e0:	e003      	b.n	80037ea <memchr+0x1a>
 80037e2:	7804      	ldrb	r4, [r0, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	428c      	cmp	r4, r1
 80037e8:	d1f6      	bne.n	80037d8 <memchr+0x8>
 80037ea:	bd10      	pop	{r4, pc}

080037ec <memcpy>:
 80037ec:	440a      	add	r2, r1
 80037ee:	4291      	cmp	r1, r2
 80037f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xc>
 80037f6:	4770      	bx	lr
 80037f8:	b510      	push	{r4, lr}
 80037fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fe:	4291      	cmp	r1, r2
 8003800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003804:	d1f9      	bne.n	80037fa <memcpy+0xe>
 8003806:	bd10      	pop	{r4, pc}

08003808 <memmove>:
 8003808:	4288      	cmp	r0, r1
 800380a:	b510      	push	{r4, lr}
 800380c:	eb01 0402 	add.w	r4, r1, r2
 8003810:	d902      	bls.n	8003818 <memmove+0x10>
 8003812:	4284      	cmp	r4, r0
 8003814:	4623      	mov	r3, r4
 8003816:	d807      	bhi.n	8003828 <memmove+0x20>
 8003818:	1e43      	subs	r3, r0, #1
 800381a:	42a1      	cmp	r1, r4
 800381c:	d008      	beq.n	8003830 <memmove+0x28>
 800381e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003826:	e7f8      	b.n	800381a <memmove+0x12>
 8003828:	4601      	mov	r1, r0
 800382a:	4402      	add	r2, r0
 800382c:	428a      	cmp	r2, r1
 800382e:	d100      	bne.n	8003832 <memmove+0x2a>
 8003830:	bd10      	pop	{r4, pc}
 8003832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800383a:	e7f7      	b.n	800382c <memmove+0x24>

0800383c <_free_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4605      	mov	r5, r0
 8003840:	2900      	cmp	r1, #0
 8003842:	d040      	beq.n	80038c6 <_free_r+0x8a>
 8003844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003848:	1f0c      	subs	r4, r1, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bfb8      	it	lt
 800384e:	18e4      	addlt	r4, r4, r3
 8003850:	f000 f910 	bl	8003a74 <__malloc_lock>
 8003854:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <_free_r+0x8c>)
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	b933      	cbnz	r3, 8003868 <_free_r+0x2c>
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6014      	str	r4, [r2, #0]
 800385e:	4628      	mov	r0, r5
 8003860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003864:	f000 b90c 	b.w	8003a80 <__malloc_unlock>
 8003868:	42a3      	cmp	r3, r4
 800386a:	d908      	bls.n	800387e <_free_r+0x42>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	1821      	adds	r1, r4, r0
 8003870:	428b      	cmp	r3, r1
 8003872:	bf01      	itttt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	1809      	addeq	r1, r1, r0
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	e7ed      	b.n	800385a <_free_r+0x1e>
 800387e:	461a      	mov	r2, r3
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b10b      	cbz	r3, 8003888 <_free_r+0x4c>
 8003884:	42a3      	cmp	r3, r4
 8003886:	d9fa      	bls.n	800387e <_free_r+0x42>
 8003888:	6811      	ldr	r1, [r2, #0]
 800388a:	1850      	adds	r0, r2, r1
 800388c:	42a0      	cmp	r0, r4
 800388e:	d10b      	bne.n	80038a8 <_free_r+0x6c>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	4401      	add	r1, r0
 8003894:	1850      	adds	r0, r2, r1
 8003896:	4283      	cmp	r3, r0
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	d1e0      	bne.n	800385e <_free_r+0x22>
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4401      	add	r1, r0
 80038a2:	6011      	str	r1, [r2, #0]
 80038a4:	6053      	str	r3, [r2, #4]
 80038a6:	e7da      	b.n	800385e <_free_r+0x22>
 80038a8:	d902      	bls.n	80038b0 <_free_r+0x74>
 80038aa:	230c      	movs	r3, #12
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	e7d6      	b.n	800385e <_free_r+0x22>
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	1821      	adds	r1, r4, r0
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf01      	itttt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	1809      	addeq	r1, r1, r0
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	6063      	str	r3, [r4, #4]
 80038c2:	6054      	str	r4, [r2, #4]
 80038c4:	e7cb      	b.n	800385e <_free_r+0x22>
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	20000174 	.word	0x20000174

080038cc <sbrk_aligned>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4e0e      	ldr	r6, [pc, #56]	; (8003908 <sbrk_aligned+0x3c>)
 80038d0:	460c      	mov	r4, r1
 80038d2:	6831      	ldr	r1, [r6, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	b911      	cbnz	r1, 80038de <sbrk_aligned+0x12>
 80038d8:	f000 f8bc 	bl	8003a54 <_sbrk_r>
 80038dc:	6030      	str	r0, [r6, #0]
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f8b7 	bl	8003a54 <_sbrk_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d00a      	beq.n	8003900 <sbrk_aligned+0x34>
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d007      	beq.n	8003904 <sbrk_aligned+0x38>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f8ac 	bl	8003a54 <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d101      	bne.n	8003904 <sbrk_aligned+0x38>
 8003900:	f04f 34ff 	mov.w	r4, #4294967295
 8003904:	4620      	mov	r0, r4
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	20000178 	.word	0x20000178

0800390c <_malloc_r>:
 800390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003910:	1ccd      	adds	r5, r1, #3
 8003912:	f025 0503 	bic.w	r5, r5, #3
 8003916:	3508      	adds	r5, #8
 8003918:	2d0c      	cmp	r5, #12
 800391a:	bf38      	it	cc
 800391c:	250c      	movcc	r5, #12
 800391e:	2d00      	cmp	r5, #0
 8003920:	4607      	mov	r7, r0
 8003922:	db01      	blt.n	8003928 <_malloc_r+0x1c>
 8003924:	42a9      	cmp	r1, r5
 8003926:	d905      	bls.n	8003934 <_malloc_r+0x28>
 8003928:	230c      	movs	r3, #12
 800392a:	2600      	movs	r6, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4630      	mov	r0, r6
 8003930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003934:	4e2e      	ldr	r6, [pc, #184]	; (80039f0 <_malloc_r+0xe4>)
 8003936:	f000 f89d 	bl	8003a74 <__malloc_lock>
 800393a:	6833      	ldr	r3, [r6, #0]
 800393c:	461c      	mov	r4, r3
 800393e:	bb34      	cbnz	r4, 800398e <_malloc_r+0x82>
 8003940:	4629      	mov	r1, r5
 8003942:	4638      	mov	r0, r7
 8003944:	f7ff ffc2 	bl	80038cc <sbrk_aligned>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	4604      	mov	r4, r0
 800394c:	d14d      	bne.n	80039ea <_malloc_r+0xde>
 800394e:	6834      	ldr	r4, [r6, #0]
 8003950:	4626      	mov	r6, r4
 8003952:	2e00      	cmp	r6, #0
 8003954:	d140      	bne.n	80039d8 <_malloc_r+0xcc>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	4631      	mov	r1, r6
 800395a:	4638      	mov	r0, r7
 800395c:	eb04 0803 	add.w	r8, r4, r3
 8003960:	f000 f878 	bl	8003a54 <_sbrk_r>
 8003964:	4580      	cmp	r8, r0
 8003966:	d13a      	bne.n	80039de <_malloc_r+0xd2>
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	3503      	adds	r5, #3
 800396c:	1a6d      	subs	r5, r5, r1
 800396e:	f025 0503 	bic.w	r5, r5, #3
 8003972:	3508      	adds	r5, #8
 8003974:	2d0c      	cmp	r5, #12
 8003976:	bf38      	it	cc
 8003978:	250c      	movcc	r5, #12
 800397a:	4638      	mov	r0, r7
 800397c:	4629      	mov	r1, r5
 800397e:	f7ff ffa5 	bl	80038cc <sbrk_aligned>
 8003982:	3001      	adds	r0, #1
 8003984:	d02b      	beq.n	80039de <_malloc_r+0xd2>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	442b      	add	r3, r5
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	e00e      	b.n	80039ac <_malloc_r+0xa0>
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	1b52      	subs	r2, r2, r5
 8003992:	d41e      	bmi.n	80039d2 <_malloc_r+0xc6>
 8003994:	2a0b      	cmp	r2, #11
 8003996:	d916      	bls.n	80039c6 <_malloc_r+0xba>
 8003998:	1961      	adds	r1, r4, r5
 800399a:	42a3      	cmp	r3, r4
 800399c:	6025      	str	r5, [r4, #0]
 800399e:	bf18      	it	ne
 80039a0:	6059      	strne	r1, [r3, #4]
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	bf08      	it	eq
 80039a6:	6031      	streq	r1, [r6, #0]
 80039a8:	5162      	str	r2, [r4, r5]
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	4638      	mov	r0, r7
 80039ae:	f104 060b 	add.w	r6, r4, #11
 80039b2:	f000 f865 	bl	8003a80 <__malloc_unlock>
 80039b6:	f026 0607 	bic.w	r6, r6, #7
 80039ba:	1d23      	adds	r3, r4, #4
 80039bc:	1af2      	subs	r2, r6, r3
 80039be:	d0b6      	beq.n	800392e <_malloc_r+0x22>
 80039c0:	1b9b      	subs	r3, r3, r6
 80039c2:	50a3      	str	r3, [r4, r2]
 80039c4:	e7b3      	b.n	800392e <_malloc_r+0x22>
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	bf0c      	ite	eq
 80039cc:	6032      	streq	r2, [r6, #0]
 80039ce:	605a      	strne	r2, [r3, #4]
 80039d0:	e7ec      	b.n	80039ac <_malloc_r+0xa0>
 80039d2:	4623      	mov	r3, r4
 80039d4:	6864      	ldr	r4, [r4, #4]
 80039d6:	e7b2      	b.n	800393e <_malloc_r+0x32>
 80039d8:	4634      	mov	r4, r6
 80039da:	6876      	ldr	r6, [r6, #4]
 80039dc:	e7b9      	b.n	8003952 <_malloc_r+0x46>
 80039de:	230c      	movs	r3, #12
 80039e0:	4638      	mov	r0, r7
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	f000 f84c 	bl	8003a80 <__malloc_unlock>
 80039e8:	e7a1      	b.n	800392e <_malloc_r+0x22>
 80039ea:	6025      	str	r5, [r4, #0]
 80039ec:	e7de      	b.n	80039ac <_malloc_r+0xa0>
 80039ee:	bf00      	nop
 80039f0:	20000174 	.word	0x20000174

080039f4 <_realloc_r>:
 80039f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f8:	4680      	mov	r8, r0
 80039fa:	4614      	mov	r4, r2
 80039fc:	460e      	mov	r6, r1
 80039fe:	b921      	cbnz	r1, 8003a0a <_realloc_r+0x16>
 8003a00:	4611      	mov	r1, r2
 8003a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	f7ff bf81 	b.w	800390c <_malloc_r>
 8003a0a:	b92a      	cbnz	r2, 8003a18 <_realloc_r+0x24>
 8003a0c:	f7ff ff16 	bl	800383c <_free_r>
 8003a10:	4625      	mov	r5, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a18:	f000 f838 	bl	8003a8c <_malloc_usable_size_r>
 8003a1c:	4284      	cmp	r4, r0
 8003a1e:	4607      	mov	r7, r0
 8003a20:	d802      	bhi.n	8003a28 <_realloc_r+0x34>
 8003a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a26:	d812      	bhi.n	8003a4e <_realloc_r+0x5a>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f7ff ff6e 	bl	800390c <_malloc_r>
 8003a30:	4605      	mov	r5, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0ed      	beq.n	8003a12 <_realloc_r+0x1e>
 8003a36:	42bc      	cmp	r4, r7
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	bf28      	it	cs
 8003a3e:	463a      	movcs	r2, r7
 8003a40:	f7ff fed4 	bl	80037ec <memcpy>
 8003a44:	4631      	mov	r1, r6
 8003a46:	4640      	mov	r0, r8
 8003a48:	f7ff fef8 	bl	800383c <_free_r>
 8003a4c:	e7e1      	b.n	8003a12 <_realloc_r+0x1e>
 8003a4e:	4635      	mov	r5, r6
 8003a50:	e7df      	b.n	8003a12 <_realloc_r+0x1e>
	...

08003a54 <_sbrk_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	2300      	movs	r3, #0
 8003a58:	4d05      	ldr	r5, [pc, #20]	; (8003a70 <_sbrk_r+0x1c>)
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	f7fd fc7e 	bl	8001360 <_sbrk>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_sbrk_r+0x1a>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_sbrk_r+0x1a>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	2000017c 	.word	0x2000017c

08003a74 <__malloc_lock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__malloc_lock+0x8>)
 8003a76:	f000 b811 	b.w	8003a9c <__retarget_lock_acquire_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	20000180 	.word	0x20000180

08003a80 <__malloc_unlock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_unlock+0x8>)
 8003a82:	f000 b80c 	b.w	8003a9e <__retarget_lock_release_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000180 	.word	0x20000180

08003a8c <_malloc_usable_size_r>:
 8003a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a90:	1f18      	subs	r0, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfbc      	itt	lt
 8003a96:	580b      	ldrlt	r3, [r1, r0]
 8003a98:	18c0      	addlt	r0, r0, r3
 8003a9a:	4770      	bx	lr

08003a9c <__retarget_lock_acquire_recursive>:
 8003a9c:	4770      	bx	lr

08003a9e <__retarget_lock_release_recursive>:
 8003a9e:	4770      	bx	lr

08003aa0 <_init>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	bf00      	nop
 8003aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa6:	bc08      	pop	{r3}
 8003aa8:	469e      	mov	lr, r3
 8003aaa:	4770      	bx	lr

08003aac <_fini>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr
